{
  "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevJadesScalingFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newJadesScalingFactor",
          "type": "uint256"
        }
      ],
      "name": "Rebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "StartBlockSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JCBRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REBASER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "fragmentToJade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "jade",
          "type": "uint256"
        }
      ],
      "name": "jadeToFragment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jadesScalingFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxScalingFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintUnderlying",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "positive",
          "type": "bool"
        }
      ],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setLastBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setRebaseEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferUnderlying",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
    "transactionIndex": 0,
    "gasUsed": "2865398",
    "logsBloom": "0x
    "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa",
    "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18093062,
        "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18093062,
        "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18093062,
        "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b75",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18093062,
        "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18093062,
        "transactionHash": "0x3ddeb192565bdc0c695075b6b01325c0410beb34b43e6ac355676ad4d3fb6aab",
        "address": "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x000000000000000000000000000000000000000002df458b3a441482fd440000",
        "logIndex": 4,
        "blockHash": "0xe744259a508c1a1a8461a617021d409295e976bf4f93731b3dc2fdcd26ed52aa"
      }
    ],
    "blockNumber": 18093062,
    "cumulativeGasUsed": "2865398",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d55d79d14bfe5f0021a09bf5df07e663",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevJadesScalingFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newJadesScalingFactor\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StartBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JCBRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBASER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"fragmentToJade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jade\",\"type\":\"uint256\"}],\"name\":\"jadeToFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jadesScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLastBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setRebaseEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner has allowed to a spender.\",\"params\":{\"owner_\":\"The address which owns the funds.\",\"spender\":\"The address which will spend the funds.\"},\"returns\":{\"_0\":\"The number of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. This method is included for ERC20 compatibility. increaseAllowance and decreaseAllowance should be used instead. Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance - if they are both greater than zero - if a transfer transaction is mined before the later approve() call is mined.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"The balance of the specified address.\"}},\"balanceOfUnderlying(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"The underlying balance of the specified address.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner has allowed to a spender.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner has allowed to a spender. This method should be used instead of approve() to avoid the double approval vulnerability described above.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"The total number of fragments.\"}},\"transfer(address,uint256)\":{\"details\":\"Transfer tokens to a specified address.\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"_0\":\"True on success, false otherwise.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another.\",\"params\":{\"from\":\"The address you want to send tokens from.\",\"to\":\"The address you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferUnderlying(address,uint256)\":{\"details\":\"Transfer underlying balance to a specified address.\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"_0\":\"True on success, false otherwise.\"}}},\"stateVariables\":{\"_notEntered\":{\"details\":\"Guard variable for re-entrancy checks. Not currently used\"}},\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,uint256)\":{\"notice\":\"Tokens burned event\"},\"Mint(address,uint256)\":{\"notice\":\"Tokens minted event\"},\"Rebase(uint256,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are rebased\"},\"StartBlockSet(uint256)\":{\"notice\":\"InitTimestamp set (see rebase())\"}},\"kind\":\"user\",\"methods\":{\"BASE()\":{\"notice\":\"Used for percentage maths\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Currently returns the internal storage amount\"},\"burn(uint256)\":{\"notice\":\"Burns tokens from msg.sender, decreases totalSupply, initSupply, and a users balance.\"},\"internalDecimals()\":{\"notice\":\"Internal decimals used to handle scaling factor\"},\"jadesScalingFactor()\":{\"notice\":\"Scaling factor that adjusts everyone's balances\"},\"maxScalingFactor()\":{\"notice\":\"Computes the current max scaling factor\"},\"mint(address,uint256)\":{\"notice\":\"Mints new tokens, increasing totalSupply, initSupply, and a users balance.\"},\"mintUnderlying(address,uint256)\":{\"notice\":\"Mints new tokens using underlying amount, increasing totalSupply, initSupply, and a users balance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JadeToken.sol\":\"JadeToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/JadeToken.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2023-02-02\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Set type with\\r\\n  // bytes32 values.\\r\\n  // The Set implementation uses private functions, and user-facing\\r\\n  // implementations (such as AddressSet) are just wrappers around the\\r\\n  // underlying Set.\\r\\n  // This means that we can only create new EnumerableSets for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct Set {\\r\\n    // Storage of set values\\r\\n    bytes32[] _values;\\r\\n    // Position of the value in the `values` array, plus 1 because index 0\\r\\n    // means a value is not in the set.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n    if (!_contains(set, value)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n    uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n    if (valueIndex != 0) {\\r\\n      // Equivalent to contains(set, value)\\r\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = valueIndex - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      if (lastIndex != toDeleteIndex) {\\r\\n        bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n        // Move the last value to the index where the value to delete is\\r\\n        set._values[toDeleteIndex] = lastValue;\\r\\n        // Update the index for the moved value\\r\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n      }\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[value];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n    return set._indexes[value] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function _length(Set storage set) private view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n    return set._values[index];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n    return set._values;\\r\\n  }\\r\\n\\r\\n  // Bytes32Set\\r\\n\\r\\n  struct Bytes32Set {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _add(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _remove(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n    return _contains(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n    return _at(set._inner, index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    bytes32[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // AddressSet\\r\\n\\r\\n  struct AddressSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(AddressSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n    return address(uint160(uint256(_at(set._inner, index))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    address[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // UintSet\\r\\n\\r\\n  struct UintSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n    return _contains(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(UintSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n    return uint256(_at(set._inner, index));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    uint256[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return interfaceId == type(IERC165).interfaceId;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n  enum Rounding {\\r\\n    Down, // Toward negative infinity\\r\\n    Up, // Toward infinity\\r\\n    Zero // Toward zero\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the largest of two numbers.\\r\\n   */\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a > b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the smallest of two numbers.\\r\\n   */\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average of two numbers. The result is rounded towards\\r\\n   * zero.\\r\\n   */\\r\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b) / 2 can overflow.\\r\\n    return (a & b) + (a ^ b) / 2;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ceiling of the division of two numbers.\\r\\n   *\\r\\n   * This differs from standard division with `/` in that it rounds up instead\\r\\n   * of rounding down.\\r\\n   */\\r\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n   * with further edits by Uniswap Labs also under MIT license.\\r\\n   */\\r\\n  function mulDiv(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2^256 + prod0.\\r\\n      uint256 prod0; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(x, y, not(0))\\r\\n        prod0 := mul(x, y)\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division.\\r\\n      if (prod1 == 0) {\\r\\n        return prod0 / denominator;\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n      uint256 remainder;\\r\\n      assembly {\\r\\n        // Compute remainder using mulmod.\\r\\n        remainder := mulmod(x, y, denominator)\\r\\n\\r\\n        // Subtract 256 bit number from 512 bit number.\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n      // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n      uint256 twos = denominator & (~denominator + 1);\\r\\n      assembly {\\r\\n        // Divide denominator by twos.\\r\\n        denominator := div(denominator, twos)\\r\\n\\r\\n        // Divide [prod1 prod0] by twos.\\r\\n        prod0 := div(prod0, twos)\\r\\n\\r\\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n\\r\\n      // Shift in bits from prod1 into prod0.\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n      // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n      uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n      // in modular arithmetic, doubling the correct bits in each step.\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inverse;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n   */\\r\\n  function mulDiv(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator,\\r\\n    Rounding rounding\\r\\n  ) internal pure returns (uint256) {\\r\\n    uint256 result = mulDiv(x, y, denominator);\\r\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n      result += 1;\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n   *\\r\\n   * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n   */\\r\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n    //\\r\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n    //\\r\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n    //\\r\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n    uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n    // into the expected uint128 result.\\r\\n    unchecked {\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      return min(result, a / result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n   */\\r\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = sqrt(a);\\r\\n      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log2(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >> 128 > 0) {\\r\\n        value >>= 128;\\r\\n        result += 128;\\r\\n      }\\r\\n      if (value >> 64 > 0) {\\r\\n        value >>= 64;\\r\\n        result += 64;\\r\\n      }\\r\\n      if (value >> 32 > 0) {\\r\\n        value >>= 32;\\r\\n        result += 32;\\r\\n      }\\r\\n      if (value >> 16 > 0) {\\r\\n        value >>= 16;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >> 8 > 0) {\\r\\n        value >>= 8;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >> 4 > 0) {\\r\\n        value >>= 4;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >> 2 > 0) {\\r\\n        value >>= 2;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >> 1 > 0) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log2(value);\\r\\n      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log10(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >= 10 ** 64) {\\r\\n        value /= 10 ** 64;\\r\\n        result += 64;\\r\\n      }\\r\\n      if (value >= 10 ** 32) {\\r\\n        value /= 10 ** 32;\\r\\n        result += 32;\\r\\n      }\\r\\n      if (value >= 10 ** 16) {\\r\\n        value /= 10 ** 16;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >= 10 ** 8) {\\r\\n        value /= 10 ** 8;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >= 10 ** 4) {\\r\\n        value /= 10 ** 4;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >= 10 ** 2) {\\r\\n        value /= 10 ** 2;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >= 10 ** 1) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log10(value);\\r\\n      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   *\\r\\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n   */\\r\\n  function log256(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >> 128 > 0) {\\r\\n        value >>= 128;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >> 64 > 0) {\\r\\n        value >>= 64;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >> 32 > 0) {\\r\\n        value >>= 32;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >> 16 > 0) {\\r\\n        value >>= 16;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >> 8 > 0) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log256(value);\\r\\n      return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n  bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n   */\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n    unchecked {\\r\\n      uint256 length = Math.log10(value) + 1;\\r\\n      string memory buffer = new string(length);\\r\\n      uint256 ptr;\\r\\n      /// @solidity memory-safe-assembly\\r\\n      assembly {\\r\\n        ptr := add(buffer, add(32, length))\\r\\n      }\\r\\n      while (true) {\\r\\n        ptr--;\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n        }\\r\\n        value /= 10;\\r\\n        if (value == 0) break;\\r\\n      }\\r\\n      return buffer;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n    unchecked {\\r\\n      return toHexString(value, Math.log256(value) + 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n   */\\r\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n    bytes memory buffer = new bytes(2 * length + 2);\\r\\n    buffer[0] = \\\"0\\\";\\r\\n    buffer[1] = \\\"x\\\";\\r\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n      buffer[i] = _SYMBOLS[value & 0xf];\\r\\n      value >>= 4;\\r\\n    }\\r\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n    return string(buffer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(address addr) internal pure returns (string memory) {\\r\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n  /**\\r\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n   *\\r\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n   * {RoleAdminChanged} not being emitted signaling this.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  event RoleAdminChanged(\\r\\n    bytes32 indexed role,\\r\\n    bytes32 indexed previousAdminRole,\\r\\n    bytes32 indexed newAdminRole\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is granted `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call, an admin role\\r\\n   * bearer except when using {AccessControl-_setupRole}.\\r\\n   */\\r\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is revoked `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call:\\r\\n   *   - if using `revokeRole`, it is the admin role bearer\\r\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n   */\\r\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControlEnumerable.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlEnumerable is IAccessControl {\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n  struct RoleData {\\r\\n    mapping(address => bool) members;\\r\\n    bytes32 adminRole;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n   * with a standardized message including the required role.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   *\\r\\n   * _Available since v4.1._\\r\\n   */\\r\\n  modifier onlyRole(bytes32 role) {\\r\\n    _checkRole(role);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\r\\n    return _roles[role].members[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n   *\\r\\n   * Format of the revert message is described in {_checkRole}.\\r\\n   *\\r\\n   * _Available since v4.6._\\r\\n   */\\r\\n  function _checkRole(bytes32 role) internal view virtual {\\r\\n    _checkRole(role, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `account` is missing `role`.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   */\\r\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      revert(\\r\\n        string(\\r\\n          abi.encodePacked(\\r\\n            \\\"AccessControl: account \\\",\\r\\n            Strings.toHexString(account),\\r\\n            \\\" is missing role \\\",\\r\\n            Strings.toHexString(uint256(role), 32)\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\r\\n    return _roles[role].adminRole;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function grantRole(\\r\\n    bytes32 role,\\r\\n    address account\\r\\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function revokeRole(\\r\\n    bytes32 role,\\r\\n    address account\\r\\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) public virtual override {\\r\\n    require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n   * checks on the calling account.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   *\\r\\n   * [WARNING]\\r\\n   * ====\\r\\n   * This function should only be called from the constructor when setting\\r\\n   * up the initial roles for the system.\\r\\n   *\\r\\n   * Using this function in any other way is effectively circumventing the admin\\r\\n   * system imposed by {AccessControl}.\\r\\n   * ====\\r\\n   *\\r\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n   */\\r\\n  function _setupRole(bytes32 role, address account) internal virtual {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n   *\\r\\n   * Emits a {RoleAdminChanged} event.\\r\\n   */\\r\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n    _roles[role].adminRole = adminRole;\\r\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      _roles[role].members[account] = true;\\r\\n      emit RoleGranted(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n    if (hasRole(role, account)) {\\r\\n      _roles[role].members[account] = false;\\r\\n      emit RoleRevoked(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\r\\n */\\r\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return\\r\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(\\r\\n    bytes32 role,\\r\\n    uint256 index\\r\\n  ) public view virtual override returns (address) {\\r\\n    return _roleMembers[role].at(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\r\\n    return _roleMembers[role].length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_grantRole} to track enumerable memberships\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\r\\n    super._grantRole(role, account);\\r\\n    _roleMembers[role].add(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual override {\\r\\n    super._revokeRole(role, account);\\r\\n    _roleMembers[role].remove(account);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    _transferOwnership(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    _checkOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the sender is not the owner.\\r\\n   */\\r\\n  function _checkOwner() internal view virtual {\\r\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Internal function without access restriction.\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data\\r\\n  ) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n   *\\r\\n   * _Available since v4.8._\\r\\n   */\\r\\n  function verifyCallResultFromTarget(\\r\\n    address target,\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    if (success) {\\r\\n      if (returndata.length == 0) {\\r\\n        // only check isContract if the call was successful and the return data is empty\\r\\n        // otherwise we already know that it was a contract\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n      }\\r\\n      return returndata;\\r\\n    } else {\\r\\n      _revert(returndata, errorMessage);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason or using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      _revert(returndata, errorMessage);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n    // Look for revert reason and bubble it up if present\\r\\n    if (returndata.length > 0) {\\r\\n      // The easiest way to bubble the revert reason is using memory via assembly\\r\\n      /// @solidity memory-safe-assembly\\r\\n      assembly {\\r\\n        let returndata_size := mload(returndata)\\r\\n        revert(add(32, returndata), returndata_size)\\r\\n      }\\r\\n    } else {\\r\\n      revert(errorMessage);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n  /**\\r\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n   * given ``owner``'s signed approval.\\r\\n   *\\r\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n   * ordering also apply here.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `deadline` must be a timestamp in the future.\\r\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n   * over the EIP712-formatted function arguments.\\r\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n   *\\r\\n   * For more information on the signature format, see the\\r\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n   * section].\\r\\n   */\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current nonce for `owner`. This value must be\\r\\n   * included whenever a signature is generated for {permit}.\\r\\n   *\\r\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n   * prevents a signature from being used multiple times.\\r\\n   */\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n   */\\r\\n  // solhint-disable-next-line func-name-mixedcase\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the decimals places of the token.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the values for {name} and {symbol}.\\r\\n   *\\r\\n   * The default value of {decimals} is 18. To select a different value for\\r\\n   * {decimals} you should overload it.\\r\\n   *\\r\\n   * All two of these values are immutable: they can only be set once during\\r\\n   * construction.\\r\\n   */\\r\\n  constructor(string memory name_, string memory symbol_) {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n   * name.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of decimals used to get its user representation.\\r\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n   *\\r\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n   * overridden;\\r\\n   *\\r\\n   * NOTE: This information is only used for _display_ purposes: it in\\r\\n   * no way affects any of the arithmetic of the contract, including\\r\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n   */\\r\\n  function decimals() public view virtual override returns (uint8) {\\r\\n    return 18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n    address owner = _msgSender();\\r\\n    _transfer(owner, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-allowance}.\\r\\n   */\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n  ) public view virtual override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-approve}.\\r\\n   *\\r\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n    address owner = _msgSender();\\r\\n    _approve(owner, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n   *\\r\\n   * NOTE: Does not update the allowance if the current allowance\\r\\n   * is the maximum `uint256`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` and `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for ``from``'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public virtual override returns (bool) {\\r\\n    address spender = _msgSender();\\r\\n    _spendAllowance(from, spender, amount);\\r\\n    _transfer(from, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n    address owner = _msgSender();\\r\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(\\r\\n    address spender,\\r\\n    uint256 subtractedValue\\r\\n  ) public virtual returns (bool) {\\r\\n    address owner = _msgSender();\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   */\\r\\n  function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    uint256 fromBalance = _balances[from];\\r\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[from] = fromBalance - amount;\\r\\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n      // decrementing then incrementing.\\r\\n      _balances[to] += amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, amount);\\r\\n\\r\\n    _afterTokenTransfer(from, to, amount);\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    _totalSupply += amount;\\r\\n    unchecked {\\r\\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n      _balances[account] += amount;\\r\\n    }\\r\\n    emit Transfer(address(0), account, amount);\\r\\n\\r\\n    _afterTokenTransfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `to` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n    uint256 accountBalance = _balances[account];\\r\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[account] = accountBalance - amount;\\r\\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n      _totalSupply -= amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n\\r\\n    _afterTokenTransfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n   *\\r\\n   * This internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n   *\\r\\n   * Does not update the allowance amount in case of infinite allowance.\\r\\n   * Revert if not enough allowance is available.\\r\\n   *\\r\\n   * Might emit an {Approval} event.\\r\\n   */\\r\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    if (currentAllowance != type(uint256).max) {\\r\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n      unchecked {\\r\\n        _approve(owner, spender, currentAllowance - amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * will be transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * has been transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Burnable.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from the caller.\\r\\n   *\\r\\n   * See {ERC20-_burn}.\\r\\n   */\\r\\n  function burn(uint256 amount) public virtual {\\r\\n    _burn(_msgSender(), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function burnFrom(address account, uint256 amount) public virtual {\\r\\n    _spendAllowance(account, _msgSender(), amount);\\r\\n    _burn(account, amount);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: contracts/ERC20PresetMinterRebaser.sol\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract ERC20PresetMinterRebaser is Context, AccessControlEnumerable, ERC20Burnable {\\r\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n  bytes32 public constant REBASER_ROLE = keccak256(\\\"REBASER_ROLE\\\");\\r\\n\\r\\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n    _setupRole(MINTER_ROLE, _msgSender());\\r\\n    _setupRole(REBASER_ROLE, _msgSender());\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n      uint256 newAllowance = oldAllowance - value;\\r\\n      _callOptionalReturn(\\r\\n        token,\\r\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function safePermit(\\r\\n    IERC20Permit token,\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) internal {\\r\\n    uint256 nonceBefore = token.nonces(owner);\\r\\n    token.permit(owner, spender, value, deadline, v, r, s);\\r\\n    uint256 nonceAfter = token.nonces(owner);\\r\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      uint256 c = a + b;\\r\\n      if (c < a) return (false, 0);\\r\\n      return (true, c);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b > a) return (false, 0);\\r\\n      return (true, a - b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n      // benefit is lost if 'b' is also tested.\\r\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n      if (a == 0) return (true, 0);\\r\\n      uint256 c = a * b;\\r\\n      if (c / a != b) return (false, 0);\\r\\n      return (true, c);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b == 0) return (false, 0);\\r\\n      return (true, a / b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b == 0) return (false, 0);\\r\\n      return (true, a % b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a + b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a * b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a % b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b <= a, errorMessage);\\r\\n      return a - b;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b > 0, errorMessage);\\r\\n      return a / b;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting with custom message when dividing by zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b > 0, errorMessage);\\r\\n      return a % b;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: contracts/JADE.sol\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Storage for a JADE token\\r\\ncontract JADE {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  /**\\r\\n   * @dev Guard variable for re-entrancy checks. Not currently used\\r\\n   */\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /**\\r\\n   * @notice Governor for this contract\\r\\n   */\\r\\n  address public gov;\\r\\n\\r\\n  /**\\r\\n   * @notice Pending governance for this contract\\r\\n   */\\r\\n  address public pendingGov;\\r\\n\\r\\n  /**\\r\\n   * @notice Approved rebaser for this contract\\r\\n   */\\r\\n  address public rebaser;\\r\\n\\r\\n  /**\\r\\n   * @notice Approved migrator for this contract\\r\\n   */\\r\\n  address public migrator;\\r\\n\\r\\n  /**\\r\\n   * @notice Incentivizer address of YAM protocol\\r\\n   */\\r\\n  address public incentivizer;\\r\\n\\r\\n  /**\\r\\n   * @notice Total supply of YAMs\\r\\n   */\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  /**\\r\\n   * @notice Internal decimals used to handle scaling factor\\r\\n   */\\r\\n  uint256 public constant internalDecimals = 10 ** 24;\\r\\n\\r\\n  /**\\r\\n   * @notice Used for percentage maths\\r\\n   */\\r\\n  uint256 public constant BASE = 10 ** 18;\\r\\n\\r\\n  /**\\r\\n   * @notice Scaling factor that adjusts everyone's balances\\r\\n   */\\r\\n  uint256 public yamsScalingFactor;\\r\\n\\r\\n  mapping(address => uint256) internal _yamBalances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) internal _allowedFragments;\\r\\n\\r\\n  uint256 public initSupply;\\r\\n\\r\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n  bytes32 public constant PERMIT_TYPEHASH =\\r\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n  bytes32 public DOMAIN_SEPARATOR;\\r\\n\\r\\n  mapping(address => uint256) public nonces;\\r\\n\\r\\n  /// @notice The EIP-712 typehash for the contract's domain\\r\\n  bytes32 public constant DOMAIN_TYPEHASH =\\r\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n}\\r\\n\\r\\n// File: contracts/IJADE.sol\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract IJADE {\\r\\n  /**\\r\\n   * @notice Event emitted when tokens are rebased\\r\\n   */\\r\\n  event Rebase(uint256 epoch, uint256 prevJadesScalingFactor, uint256 newJadesScalingFactor);\\r\\n\\r\\n  /* - Extra Events - */\\r\\n  /**\\r\\n   * @notice Tokens minted event\\r\\n   */\\r\\n  event Mint(address to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Tokens burned event\\r\\n   */\\r\\n  event Burn(address from, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice InitTimestamp set (see rebase())\\r\\n   */\\r\\n  event StartBlockSet(uint256 value);\\r\\n}\\r\\n\\r\\n// File: contracts/Jade.sol\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract JadeToken is ERC20PresetMinterRebaser, Ownable, IJADE {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  /**\\r\\n   * @dev Guard variable for re-entrancy checks. Not currently used\\r\\n   */\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /**\\r\\n   * @notice Internal decimals used to handle scaling factor\\r\\n   */\\r\\n  uint256 public constant internalDecimals = 10 ** 24;\\r\\n\\r\\n  /**\\r\\n   * @notice Used for percentage maths\\r\\n   */\\r\\n  uint256 public constant BASE = 10 ** 18;\\r\\n\\r\\n  /**\\r\\n   * @notice Scaling factor that adjusts everyone's balances\\r\\n   */\\r\\n  uint256 public jadesScalingFactor;\\r\\n\\r\\n  mapping(address => uint256) internal _jadeBalances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) internal _allowedFragments;\\r\\n\\r\\n  uint256 public initSupply;\\r\\n\\r\\n  uint256 public initTimestamp;\\r\\n  uint256 public startBlock;\\r\\n  // Last block where rebase was called\\r\\n  uint256 public lastBlock;\\r\\n  // Rebase can be disabled 90 days after token launch\\r\\n  bool public rebaseEnabled;\\r\\n  // Core Bankroll rewards per block\\r\\n  uint256 public JCBRewardPerBlock = 300e18;\\r\\n\\r\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n  bytes32 public constant PERMIT_TYPEHASH =\\r\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n  bytes32 public DOMAIN_SEPARATOR;\\r\\n\\r\\n  mapping(address => uint256) public nonces;\\r\\n\\r\\n  /// @notice The EIP-712 typehash for the contract's domain\\r\\n  bytes32 public constant DOMAIN_TYPEHASH =\\r\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n  uint256 private INIT_SUPPLY = 888888889 * 10 ** 18;\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  modifier validRecipient(address to) {\\r\\n    require(to != address(0x0));\\r\\n    require(to != address(this));\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() ERC20PresetMinterRebaser(\\\"Jade\\\", \\\"JADE\\\") {\\r\\n    jadesScalingFactor = BASE;\\r\\n    initSupply = _fragmentToJade(INIT_SUPPLY);\\r\\n    _totalSupply = INIT_SUPPLY;\\r\\n    _jadeBalances[owner()] = initSupply;\\r\\n    startBlock = 0;\\r\\n    lastBlock = 0;\\r\\n    rebaseEnabled = false;\\r\\n    initTimestamp = block.timestamp;\\r\\n\\r\\n    emit Transfer(address(0), msg.sender, INIT_SUPPLY);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The total number of fragments.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Computes the current max scaling factor\\r\\n   */\\r\\n  function maxScalingFactor() external view returns (uint256) {\\r\\n    return _maxScalingFactor();\\r\\n  }\\r\\n\\r\\n  function _maxScalingFactor() internal view returns (uint256) {\\r\\n    // scaling factor can only go up to 2**256-1 = initSupply * jadesScalingFactor\\r\\n    // this is used to check if jadesScalingFactor will be too high to compute balances when rebasing.\\r\\n    return uint256(int256(-1)) / initSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints new tokens, increasing totalSupply, initSupply, and a users balance.\\r\\n   */\\r\\n  function mint(address to, uint256 amount) external returns (bool) {\\r\\n    require(hasRole(MINTER_ROLE, _msgSender()), \\\"Must have minter role\\\");\\r\\n\\r\\n    _mint(to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _mint(address to, uint256 amount) internal override {\\r\\n    // increase totalSupply\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n    // get underlying value\\r\\n    uint256 jadeValue = _fragmentToJade(amount);\\r\\n\\r\\n    // increase initSupply\\r\\n    initSupply = initSupply.add(jadeValue);\\r\\n\\r\\n    // make sure the mint didnt push maxScalingFactor too low\\r\\n    require(jadesScalingFactor <= _maxScalingFactor(), \\\"max scaling factor too low\\\");\\r\\n\\r\\n    // add balance\\r\\n    _jadeBalances[to] = _jadeBalances[to].add(jadeValue);\\r\\n\\r\\n    emit Mint(to, amount);\\r\\n    emit Transfer(address(0), to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burns tokens from msg.sender, decreases totalSupply, initSupply, and a users balance.\\r\\n   */\\r\\n\\r\\n  function burn(uint256 amount) public override {\\r\\n    _burn(amount);\\r\\n  }\\r\\n\\r\\n  function _burn(uint256 amount) internal {\\r\\n    // decrease totalSupply\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n\\r\\n    // get underlying value\\r\\n    uint256 jadeValue = _fragmentToJade(amount);\\r\\n\\r\\n    // decrease initSupply\\r\\n    initSupply = initSupply.sub(jadeValue);\\r\\n\\r\\n    // decrease balance\\r\\n    _jadeBalances[msg.sender] = _jadeBalances[msg.sender].sub(jadeValue);\\r\\n    emit Burn(msg.sender, amount);\\r\\n    emit Transfer(msg.sender, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mints new tokens using underlying amount, increasing totalSupply, initSupply, and a users balance.\\r\\n   */\\r\\n  function mintUnderlying(address to, uint256 amount) public returns (bool) {\\r\\n    require(hasRole(MINTER_ROLE, _msgSender()), \\\"Must have minter role\\\");\\r\\n\\r\\n    _mintUnderlying(to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _mintUnderlying(address to, uint256 amount) internal {\\r\\n    // increase initSupply\\r\\n    initSupply = initSupply.add(amount);\\r\\n\\r\\n    // get external value\\r\\n    uint256 scaledAmount = _jadeToFragment(amount);\\r\\n\\r\\n    // increase totalSupply\\r\\n    _totalSupply = _totalSupply.add(scaledAmount);\\r\\n\\r\\n    // make sure the mint didnt push maxScalingFactor too low\\r\\n    require(jadesScalingFactor <= _maxScalingFactor(), \\\"max scaling factor too low\\\");\\r\\n\\r\\n    // add balance\\r\\n    _jadeBalances[to] = _jadeBalances[to].add(amount);\\r\\n\\r\\n    emit Mint(to, scaledAmount);\\r\\n    emit Transfer(address(0), to, scaledAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer underlying balance to a specified address.\\r\\n   * @param to The address to transfer to.\\r\\n   * @param value The amount to be transferred.\\r\\n   * @return True on success, false otherwise.\\r\\n   */\\r\\n  function transferUnderlying(address to, uint256 value) public validRecipient(to) returns (bool) {\\r\\n    // sub from balance of sender\\r\\n    _jadeBalances[msg.sender] = _jadeBalances[msg.sender].sub(value);\\r\\n\\r\\n    // add to balance of receiver\\r\\n    _jadeBalances[to] = _jadeBalances[to].add(value);\\r\\n    emit Transfer(msg.sender, to, _jadeToFragment(value));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /* - ERC20 functionality - */\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens to a specified address.\\r\\n   * @param to The address to transfer to.\\r\\n   * @param value The amount to be transferred.\\r\\n   * @return True on success, false otherwise.\\r\\n   */\\r\\n  function transfer(address to, uint256 value) public override validRecipient(to) returns (bool) {\\r\\n    // underlying balance is stored in jades, so divide by current scaling factor\\r\\n\\r\\n    // note, this means as scaling factor grows, dust will be untransferrable.\\r\\n    // minimum transfer value == jadesScalingFactor / 1e24;\\r\\n\\r\\n    // get amount in underlying\\r\\n    uint256 jadeValue = _fragmentToJade(value);\\r\\n\\r\\n    // sub from balance of sender\\r\\n    _jadeBalances[msg.sender] = _jadeBalances[msg.sender].sub(jadeValue);\\r\\n\\r\\n    // add to balance of receiver\\r\\n    _jadeBalances[to] = _jadeBalances[to].add(jadeValue);\\r\\n    emit Transfer(msg.sender, to, value);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another.\\r\\n   * @param from The address you want to send tokens from.\\r\\n   * @param to The address you want to transfer to.\\r\\n   * @param value The amount of tokens to be transferred.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) public override validRecipient(to) returns (bool) {\\r\\n    // decrease allowance\\r\\n    _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\\r\\n\\r\\n    // get value in jades\\r\\n    uint256 jadeValue = _fragmentToJade(value);\\r\\n\\r\\n    // sub from from\\r\\n    _jadeBalances[from] = _jadeBalances[from].sub(jadeValue);\\r\\n    _jadeBalances[to] = _jadeBalances[to].add(jadeValue);\\r\\n    emit Transfer(from, to, value);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @param who The address to query.\\r\\n   * @return The balance of the specified address.\\r\\n   */\\r\\n  function balanceOf(address who) public view override returns (uint256) {\\r\\n    return _jadeToFragment(_jadeBalances[who]);\\r\\n  }\\r\\n\\r\\n  /** @notice Currently returns the internal storage amount\\r\\n   * @param who The address to query.\\r\\n   * @return The underlying balance of the specified address.\\r\\n   */\\r\\n  function balanceOfUnderlying(address who) public view returns (uint256) {\\r\\n    return _jadeBalances[who];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens that an owner has allowed to a spender.\\r\\n   * @param owner_ The address which owns the funds.\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @return The number of tokens still available for the spender.\\r\\n   */\\r\\n  function allowance(address owner_, address spender) public view override returns (uint256) {\\r\\n    return _allowedFragments[owner_][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of\\r\\n   * msg.sender. This method is included for ERC20 compatibility.\\r\\n   * increaseAllowance and decreaseAllowance should be used instead.\\r\\n   * Changing an allowance with this method brings the risk that someone may transfer both\\r\\n   * the old and the new allowance - if they are both greater than zero - if a transfer\\r\\n   * transaction is mined before the later approve() call is mined.\\r\\n   *\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address spender, uint256 value) public override returns (bool) {\\r\\n    _allowedFragments[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Increase the amount of tokens that an owner has allowed to a spender.\\r\\n   * This method should be used instead of approve() to avoid the double approval vulnerability\\r\\n   * described above.\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param addedValue The amount of tokens to increase the allowance by.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\\r\\n    _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\\r\\n    emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Decrease the amount of tokens that an owner has allowed to a spender.\\r\\n   *\\r\\n   * @param spender The address which will spend the funds.\\r\\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n   */\\r\\n  function decreaseAllowance(\\r\\n    address spender,\\r\\n    uint256 subtractedValue\\r\\n  ) public override returns (bool) {\\r\\n    uint256 oldValue = _allowedFragments[msg.sender][spender];\\r\\n    if (subtractedValue >= oldValue) {\\r\\n      _allowedFragments[msg.sender][spender] = 0;\\r\\n    } else {\\r\\n      _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\\r\\n    }\\r\\n    emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // --- Approve by signature ---\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) public {\\r\\n    require(block.timestamp <= deadline, \\\"JADE/permit-expired\\\");\\r\\n\\r\\n    bytes32 digest = keccak256(\\r\\n      abi.encodePacked(\\r\\n        \\\"\\\\x19\\\\x01\\\",\\r\\n        DOMAIN_SEPARATOR,\\r\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n      )\\r\\n    );\\r\\n\\r\\n    require(owner != address(0), \\\"JADE/invalid-address-0\\\");\\r\\n    require(owner == ecrecover(digest, v, r, s), \\\"JADE/invalid-permit\\\");\\r\\n    _allowedFragments[owner][spender] = value;\\r\\n    emit Approval(owner, spender, value);\\r\\n  }\\r\\n\\r\\n  function rebase(uint256 epoch, uint256 indexDelta, bool positive) public returns (uint256) {\\r\\n    require(rebaseEnabled, \\\"Rebase disabled\\\");\\r\\n    require(hasRole(REBASER_ROLE, _msgSender()), \\\"Must have rebaser role\\\");\\r\\n\\r\\n    // no change\\r\\n    if (indexDelta == 0) {\\r\\n      emit Rebase(epoch, jadesScalingFactor, jadesScalingFactor);\\r\\n      return _totalSupply;\\r\\n    }\\r\\n\\r\\n    // for events\\r\\n    uint256 prevJadesScalingFactor = jadesScalingFactor;\\r\\n\\r\\n    if (!positive) {\\r\\n      // negative rebase, decrease scaling factor\\r\\n      jadesScalingFactor = jadesScalingFactor.mul(BASE.sub(indexDelta)).div(BASE);\\r\\n    } else {\\r\\n      // positive rebase, increase scaling factor\\r\\n      uint256 newScalingFactor = jadesScalingFactor.mul(BASE.add(indexDelta)).div(BASE);\\r\\n      if (newScalingFactor < _maxScalingFactor()) {\\r\\n        jadesScalingFactor = newScalingFactor;\\r\\n      } else {\\r\\n        jadesScalingFactor = _maxScalingFactor();\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // update total supply, correctly\\r\\n    _totalSupply = _jadeToFragment(initSupply);\\r\\n\\r\\n    emit Rebase(epoch, prevJadesScalingFactor, jadesScalingFactor);\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function jadeToFragment(uint256 jade) public view returns (uint256) {\\r\\n    return _jadeToFragment(jade);\\r\\n  }\\r\\n\\r\\n  function fragmentToJade(uint256 value) public view returns (uint256) {\\r\\n    return _fragmentToJade(value);\\r\\n  }\\r\\n\\r\\n  function _jadeToFragment(uint256 jade) internal view returns (uint256) {\\r\\n    return jade.mul(jadesScalingFactor).div(internalDecimals);\\r\\n  }\\r\\n\\r\\n  function _fragmentToJade(uint256 value) internal view returns (uint256) {\\r\\n    return value.mul(internalDecimals).div(jadesScalingFactor);\\r\\n  }\\r\\n\\r\\n  // Rescue tokens\\r\\n  function rescueTokens(address token, address to, uint256 amount) public onlyOwner returns (bool) {\\r\\n    // transfer to\\r\\n    SafeERC20.safeTransfer(IERC20(token), to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function setLastBlock(uint256 _value) external {\\r\\n    require(hasRole(REBASER_ROLE, _msgSender()), \\\"Must have rebaser role\\\");\\r\\n    lastBlock = _value;\\r\\n  }\\r\\n\\r\\n  // Set rebaseEnabled 90 days after launch\\r\\n  function setRebaseEnabled(bool _bool) external onlyOwner {\\r\\n    if (rebaseEnabled) {\\r\\n      require(block.timestamp > initTimestamp + 7776000, \\\"Must wait 90 days to deactivate\\\"); // 90 days\\r\\n    }\\r\\n\\r\\n    rebaseEnabled = _bool;\\r\\n  }\\r\\n\\r\\n  function setStartBlock(uint256 _value) external onlyOwner {\\r\\n    require(startBlock == 0, \\\"startBlock can only be set ONCE!!!\\\");\\r\\n    startBlock = _value;\\r\\n    emit StartBlockSet(_value);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3213892a59c1d7e57e91a98e8ee13414bf79bc8bd45c173ae9f24e35adb0f0c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052681043561a88293000006010556b02df458b3a441482fd4400006013553480156200002e57600080fd5b50604051806040016040528060048152602001634a61646560e01b815250604051806040016040528060048152602001634a41444560e01b815250818181600590816200007c91906200043c565b5060066200008b82826200043c565b506200009d91506000905033620001b5565b620000c97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620001b5565b620000f57f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b7533620001b5565b5062000103905033620001c5565b670de0b6b3a76400006008556013546200011d9062000217565b600b819055601354601455600960006200013f6007546001600160a01b031690565b6001600160a01b031681526020808201929092526040908101600090812093909355600d839055600e839055600f805460ff1916905542600c5560135490519081523392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a362000551565b620001c1828262000245565b5050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6008546000906200023f90620002388469d3c21bcecceda100000062000270565b9062000285565b92915050565b62000251828262000293565b60008281526001602052604090206200026b908262000333565b505050565b60006200027e828462000508565b9392505050565b60006200027e82846200052e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002ef3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200027e836001600160a01b03841660008181526001830160205260408120546200038d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200023f565b5060006200023f565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003c157607f821691505b602082108103620003e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026b576000816000526020600020601f850160051c81016020861015620004135750805b601f850160051c820191505b8181101562000434578281556001016200041f565b505050505050565b81516001600160401b0381111562000458576200045862000396565b6200047081620004698454620003ac565b84620003e8565b602080601f831160018114620004a857600084156200048f5750858301515b600019600386901b1c1916600185901b17855562000434565b600085815260208120601f198616915b82811015620004d957888601518255948401946001909101908401620004b8565b5085821015620004f85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820281158282048414176200023f57634e487b7160e01b600052601160045260246000fd5b6000826200054c57634e487b7160e01b600052601260045260246000fd5b500490565b61295080620005616000396000f3fe608060405234801561001057600080fd5b50600436106103275760003560e01c8063715018a6116101b8578063a217fddf11610104578063d505accf116100a2578063dd62ed3e1161007c578063dd62ed3e14610702578063ec342ad01461073b578063f2fde38b1461074a578063f35e4a6e1461075d57600080fd5b8063d505accf146106b5578063d5391393146106c8578063d547741f146106ef57600080fd5b8063ac51aa84116100de578063ac51aa8414610679578063babb9a8f14610682578063ca15c8731461068f578063cea9d26f146106a257600080fd5b8063a217fddf1461064b578063a457c2d714610653578063a9059cbb1461066657600080fd5b806383eb70e511610171578063917505f41161014b578063917505f41461061457806391d148541461062757806395d89b411461063a57806397d63f931461064257600080fd5b806383eb70e5146105b55780638da5cb5b146105dc5780639010d07c1461060157600080fd5b8063715018a6146105555780637358c57a1461055d57806379cc6790146105665780637af548c1146105795780637ecebe001461058c578063806b984f146105ac57600080fd5b8063336d26921161027757806342966c68116102305780635d974a661161020a5780635d974a661461050b57806364dd48f51461051e57806366f3bd1c1461052f57806370a082311461054257600080fd5b806342966c68146104dc57806348cd4cb1146104ef5780634b56de38146104f857600080fd5b8063336d26921461045e5780633644e5151461047157806336568abe1461047a578063395093511461048d5780633af9e669146104a057806340c10f19146104c957600080fd5b806320606b70116102e4578063248a9ca3116102be578063248a9ca3146103f05780632f2ff15d1461041357806330adf81f14610428578063313ce5671461044f57600080fd5b806320606b70146103a357806321542605146103ca57806323b872dd146103dd57600080fd5b806301ffc9a71461032c578063060445351461035457806306fdde031461036b578063095ea7b31461038057806311d3e6c41461039357806318160ddd1461039b575b600080fd5b61033f61033a3660046124ae565b610770565b60405190151581526020015b60405180910390f35b61035d60105481565b60405190815260200161034b565b61037361079b565b60405161034b91906124fc565b61033f61038e36600461254b565b61082d565b61035d610887565b60145461035d565b61035d7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61035d6103d8366004612575565b610896565b61033f6103eb36600461258e565b6108a1565b61035d6103fe366004612575565b60009081526020819052604090206001015490565b6104266104213660046125ca565b6109d5565b005b61035d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161034b565b61033f61046c36600461254b565b6109ff565b61035d60115481565b6104266104883660046125ca565b610ac1565b61033f61049b36600461254b565b610b44565b61035d6104ae3660046125f6565b6001600160a01b031660009081526009602052604090205490565b61033f6104d736600461254b565b610bb7565b6104266104ea366004612575565b610c3a565b61035d600d5481565b61042661050636600461261f565b610c46565b610426610519366004612575565b610cca565b61035d69d3c21bcecceda100000081565b61035d61053d366004612575565b610d3e565b61035d6105503660046125f6565b610d49565b610426610d6b565b61035d600c5481565b61042661057436600461254b565b610d7f565b61035d61058736600461263c565b610d94565b61035d61059a3660046125f6565b60126020526000908152604090205481565b61035d600e5481565b61035d7f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b7581565b6007546001600160a01b03165b6040516001600160a01b03909116815260200161034b565b6105e961060f366004612675565b610f78565b61033f61062236600461254b565b610f90565b61033f6106353660046125ca565b61100a565b610373611033565b61035d600b5481565b61035d600081565b61033f61066136600461254b565b611042565b61033f61067436600461254b565b61110a565b61035d60085481565b600f5461033f9060ff1681565b61035d61069d366004612575565b6111db565b61033f6106b036600461258e565b6111f2565b6104266106c3366004612697565b611211565b61035d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6104266106fd3660046125ca565b611493565b61035d61071036600461270a565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b61035d670de0b6b3a764000081565b6104266107583660046125f6565b6114b8565b61042661076b366004612575565b61152e565b60006001600160e01b03198216635a05180f60e01b14806107955750610795826115cc565b92915050565b6060600580546107aa90612734565b80601f01602080910402602001604051908101604052809291908181526020018280546107d690612734565b80156108235780601f106107f857610100808354040283529160200191610823565b820191906000526020600020905b81548152906001019060200180831161080657829003601f168201915b5050505050905090565b336000818152600a602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020612924833981519152906108769086815260200190565b60405180910390a350600192915050565b6000610891611601565b905090565b600061079582611613565b6000826001600160a01b0381166108b757600080fd5b306001600160a01b038216036108cc57600080fd5b6001600160a01b0385166000908152600a602090815260408083203384529091529020546108fa9084611631565b6001600160a01b0386166000908152600a6020908152604080832033845290915281209190915561092a84611613565b6001600160a01b0387166000908152600960205260409020549091506109509082611631565b6001600160a01b03808816600090815260096020526040808220939093559087168152205461097f908261163d565b6001600160a01b038087166000818152600960205260409081902093909355915190881690600080516020612904833981519152906109c19088815260200190565b60405180910390a350600195945050505050565b6000828152602081905260409020600101546109f081611649565b6109fa8383611653565b505050565b6000826001600160a01b038116610a1557600080fd5b306001600160a01b03821603610a2a57600080fd5b33600090815260096020526040902054610a449084611631565b33600090815260096020526040808220929092556001600160a01b03861681522054610a70908461163d565b6001600160a01b03851660008181526009602052604090209190915533600080516020612904833981519152610aa586611675565b6040519081526020015b60405180910390a35060019392505050565b6001600160a01b0381163314610b365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610b40828261169a565b5050565b336000908152600a602090815260408083206001600160a01b0386168452909152812054610b72908361163d565b336000818152600a602090815260408083206001600160a01b038916808552908352928190208590555193845290926000805160206129248339815191529101610876565b6000610be37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361100a565b610c275760405162461bcd60e51b81526020600482015260156024820152744d7573742068617665206d696e74657220726f6c6560581b6044820152606401610b2d565b610c3183836116bc565b50600192915050565b610c43816117f1565b50565b610c4e6118b0565b600f5460ff1615610cb757600c54610c69906276a700612784565b4211610cb75760405162461bcd60e51b815260206004820152601f60248201527f4d7573742077616974203930206461797320746f2064656163746976617465006044820152606401610b2d565b600f805460ff1916911515919091179055565b610cf47f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b753361100a565b610d395760405162461bcd60e51b81526020600482015260166024820152754d7573742068617665207265626173657220726f6c6560501b6044820152606401610b2d565b600e55565b600061079582611675565b6001600160a01b03811660009081526009602052604081205461079590611675565b610d736118b0565b610d7d600061190a565b565b610d8a82338361195c565b610b4082826119ee565b600f5460009060ff16610ddb5760405162461bcd60e51b815260206004820152600f60248201526e149958985cd948191a5cd8589b1959608a1b6044820152606401610b2d565b610e057f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b753361100a565b610e4a5760405162461bcd60e51b81526020600482015260166024820152754d7573742068617665207265626173657220726f6c6560501b6044820152606401610b2d565b82600003610e9e57600854604080518681526020810183905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150601454610f71565b60085482610ed657610ece670de0b6b3a7640000610ec8610ebf8288611631565b60085490611b10565b90611b1c565b600855610f1a565b6000610ef1670de0b6b3a7640000610ec8610ebf828961163d565b9050610efb611601565b811015610f0c576008819055610f18565b610f14611601565b6008555b505b610f25600b54611675565b601455600854604080518781526020810184905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150506014545b9392505050565b6000828152600160205260408120610f719083611b28565b6000610fbc7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361100a565b6110005760405162461bcd60e51b81526020600482015260156024820152744d7573742068617665206d696e74657220726f6c6560581b6044820152606401610b2d565b610c318383611b34565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600680546107aa90612734565b336000908152600a602090815260408083206001600160a01b038616845290915281205480831061109657336000908152600a602090815260408083206001600160a01b03881684529091528120556110c5565b6110a08184611631565b336000908152600a602090815260408083206001600160a01b03891684529091529020555b336000818152600a602090815260408083206001600160a01b038916808552908352928190205490519081529192916000805160206129248339815191529101610aaf565b6000826001600160a01b03811661112057600080fd5b306001600160a01b0382160361113557600080fd5b600061114084611613565b3360009081526009602052604090205490915061115d9082611631565b33600090815260096020526040808220929092556001600160a01b03871681522054611189908261163d565b6001600160a01b038616600081815260096020526040908190209290925590513390600080516020612904833981519152906111c89088815260200190565b60405180910390a3506001949350505050565b600081815260016020526040812061079590611c60565b60006111fc6118b0565b611207848484611c6a565b5060019392505050565b834211156112575760405162461bcd60e51b8152602060048201526013602482015272129051114bdc195c9b5a5d0b595e1c1a5c9959606a1b6044820152606401610b2d565b6011546001600160a01b038816600090815260126020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876112aa83612797565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161132392919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090506001600160a01b03881661138c5760405162461bcd60e51b815260206004820152601660248201527504a4144452f696e76616c69642d616464726573732d360541b6044820152606401610b2d565b60408051600081526020810180835283905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156113df573d6000803e3d6000fd5b505050602060405103516001600160a01b0316886001600160a01b03161461143f5760405162461bcd60e51b8152602060048201526013602482015272129051114bda5b9d985b1a590b5c195c9b5a5d606a1b6044820152606401610b2d565b6001600160a01b038881166000818152600a60209081526040808320948c16808452948252918290208a90559051898152600080516020612924833981519152910160405180910390a35050505050505050565b6000828152602081905260409020600101546114ae81611649565b6109fa838361169a565b6114c06118b0565b6001600160a01b0381166115255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b2d565b610c438161190a565b6115366118b0565b600d54156115915760405162461bcd60e51b815260206004820152602260248201527f7374617274426c6f636b2063616e206f6e6c7920626520736574204f4e434521604482015261212160f01b6064820152608401610b2d565b600d8190556040518181527fc9071777b7b8965ca4af12d74bba5af5f2932e988111a30eeca0afd6ff922f279060200160405180910390a150565b60006001600160e01b03198216637965db0b60e01b148061079557506301ffc9a760e01b6001600160e01b0319831614610795565b6000600b5460001961089191906127b0565b60085460009061079590610ec88469d3c21bcecceda1000000611b10565b6000610f7182846127d2565b6000610f718284612784565b610c438133611cbc565b61165d8282611d15565b60008281526001602052604090206109fa9082611d99565b600061079569d3c21bcecceda1000000610ec860085485611b1090919063ffffffff16565b6116a48282611dae565b60008281526001602052604090206109fa9082611e13565b6014546116c9908261163d565b60145560006116d782611613565b600b549091506116e7908261163d565b600b556116f2611601565b60085411156117435760405162461bcd60e51b815260206004820152601a60248201527f6d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b2d565b6001600160a01b038316600090815260096020526040902054611766908261163d565b6001600160a01b0384166000818152600960209081526040918290209390935580519182529181018490527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a16040518281526001600160a01b03841690600090600080516020612904833981519152906020015b60405180910390a3505050565b6014546117fe9082611631565b601455600061180c82611613565b600b5490915061181c9082611631565b600b55336000908152600960205260409020546118399082611631565b336000818152600960209081526040918290209390935580519182529181018490527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5910160405180910390a160405182815260009033906000805160206129048339815191529060200160405180910390a35050565b6007546001600160a01b03163314610d7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b2d565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038381166000908152600a602090815260408083209386168352929052205460001981146119e857818110156119db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b2d565b6119e88484848403611e28565b50505050565b6001600160a01b038216611a4e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b2d565b6001600160a01b03821660009081526002602052604090205481811015611ac25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b2d565b6001600160a01b0383166000818152600260209081526040808320868603905560048054879003905551858152919291600080516020612904833981519152910160405180910390a3505050565b6000610f7182846127e5565b6000610f7182846127b0565b6000610f718383611f32565b600b54611b41908261163d565b600b556000611b4f82611675565b601454909150611b5f908261163d565b601455611b6a611601565b6008541115611bbb5760405162461bcd60e51b815260206004820152601a60248201527f6d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b2d565b6001600160a01b038316600090815260096020526040902054611bde908361163d565b6001600160a01b0384166000818152600960209081526040918290209390935580519182529181018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a16040518181526001600160a01b03841690600090600080516020612904833981519152906020016117e4565b6000610795825490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109fa908490611f5c565b611cc6828261100a565b610b4057611cd38161202e565b611cde836020612040565b604051602001611cef9291906127fc565b60408051601f198184030181529082905262461bcd60e51b8252610b2d916004016124fc565b611d1f828261100a565b610b40576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f71836001600160a01b0384166121dc565b611db8828261100a565b15610b40576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f71836001600160a01b03841661222b565b6001600160a01b038316611e8a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b2d565b6001600160a01b038216611eeb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b2d565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020859055905184815260008051602061292483398151915291016117e4565b6000826000018281548110611f4957611f49612871565b9060005260206000200154905092915050565b6000611fb1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661231e9092919063ffffffff16565b8051909150156109fa5780806020019051810190611fcf9190612887565b6109fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b2d565b60606107956001600160a01b03831660145b6060600061204f8360026127e5565b61205a906002612784565b67ffffffffffffffff811115612072576120726128a4565b6040519080825280601f01601f19166020018201604052801561209c576020820181803683370190505b509050600360fc1b816000815181106120b7576120b7612871565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e6576120e6612871565b60200101906001600160f81b031916908160001a905350600061210a8460026127e5565b612115906001612784565b90505b600181111561218d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061214957612149612871565b1a60f81b82828151811061215f5761215f612871565b60200101906001600160f81b031916908160001a90535060049490941c93612186816128ba565b9050612118565b508315610f715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b2d565b600081815260018301602052604081205461222357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610795565b506000610795565b6000818152600183016020526040812054801561231457600061224f6001836127d2565b8554909150600090612263906001906127d2565b90508181146122c857600086600001828154811061228357612283612871565b90600052602060002001549050808760000184815481106122a6576122a6612871565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122d9576122d96128d1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610795565b6000915050610795565b606061232d8484600085612335565b949350505050565b6060824710156123965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b2d565b600080866001600160a01b031685876040516123b291906128e7565b60006040518083038185875af1925050503d80600081146123ef576040519150601f19603f3d011682016040523d82523d6000602084013e6123f4565b606091505b509150915061240587838387612410565b979650505050505050565b6060831561247f578251600003612478576001600160a01b0385163b6124785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b2d565b508161232d565b61232d83838151156124945781518083602001fd5b8060405162461bcd60e51b8152600401610b2d91906124fc565b6000602082840312156124c057600080fd5b81356001600160e01b031981168114610f7157600080fd5b60005b838110156124f35781810151838201526020016124db565b50506000910152565b602081526000825180602084015261251b8160408501602087016124d8565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461254657600080fd5b919050565b6000806040838503121561255e57600080fd5b6125678361252f565b946020939093013593505050565b60006020828403121561258757600080fd5b5035919050565b6000806000606084860312156125a357600080fd5b6125ac8461252f565b92506125ba6020850161252f565b9150604084013590509250925092565b600080604083850312156125dd57600080fd5b823591506125ed6020840161252f565b90509250929050565b60006020828403121561260857600080fd5b610f718261252f565b8015158114610c4357600080fd5b60006020828403121561263157600080fd5b8135610f7181612611565b60008060006060848603121561265157600080fd5b8335925060208401359150604084013561266a81612611565b809150509250925092565b6000806040838503121561268857600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156126b257600080fd5b6126bb8861252f565b96506126c96020890161252f565b95506040880135945060608801359350608088013560ff811681146126ed57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561271d57600080fd5b6127268361252f565b91506125ed6020840161252f565b600181811c9082168061274857607f821691505b60208210810361276857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107955761079561276e565b6000600182016127a9576127a961276e565b5060010190565b6000826127cd57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156107955761079561276e565b80820281158282048414176107955761079561276e565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128348160178501602088016124d8565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128658160288401602088016124d8565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561289957600080fd5b8151610f7181612611565b634e487b7160e01b600052604160045260246000fd5b6000816128c9576128c961276e565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516128f98184602087016124d8565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a164736f6c6343000817000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103275760003560e01c8063715018a6116101b8578063a217fddf11610104578063d505accf116100a2578063dd62ed3e1161007c578063dd62ed3e14610702578063ec342ad01461073b578063f2fde38b1461074a578063f35e4a6e1461075d57600080fd5b8063d505accf146106b5578063d5391393146106c8578063d547741f146106ef57600080fd5b8063ac51aa84116100de578063ac51aa8414610679578063babb9a8f14610682578063ca15c8731461068f578063cea9d26f146106a257600080fd5b8063a217fddf1461064b578063a457c2d714610653578063a9059cbb1461066657600080fd5b806383eb70e511610171578063917505f41161014b578063917505f41461061457806391d148541461062757806395d89b411461063a57806397d63f931461064257600080fd5b806383eb70e5146105b55780638da5cb5b146105dc5780639010d07c1461060157600080fd5b8063715018a6146105555780637358c57a1461055d57806379cc6790146105665780637af548c1146105795780637ecebe001461058c578063806b984f146105ac57600080fd5b8063336d26921161027757806342966c68116102305780635d974a661161020a5780635d974a661461050b57806364dd48f51461051e57806366f3bd1c1461052f57806370a082311461054257600080fd5b806342966c68146104dc57806348cd4cb1146104ef5780634b56de38146104f857600080fd5b8063336d26921461045e5780633644e5151461047157806336568abe1461047a578063395093511461048d5780633af9e669146104a057806340c10f19146104c957600080fd5b806320606b70116102e4578063248a9ca3116102be578063248a9ca3146103f05780632f2ff15d1461041357806330adf81f14610428578063313ce5671461044f57600080fd5b806320606b70146103a357806321542605146103ca57806323b872dd146103dd57600080fd5b806301ffc9a71461032c578063060445351461035457806306fdde031461036b578063095ea7b31461038057806311d3e6c41461039357806318160ddd1461039b575b600080fd5b61033f61033a3660046124ae565b610770565b60405190151581526020015b60405180910390f35b61035d60105481565b60405190815260200161034b565b61037361079b565b60405161034b91906124fc565b61033f61038e36600461254b565b61082d565b61035d610887565b60145461035d565b61035d7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61035d6103d8366004612575565b610896565b61033f6103eb36600461258e565b6108a1565b61035d6103fe366004612575565b60009081526020819052604090206001015490565b6104266104213660046125ca565b6109d5565b005b61035d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6040516012815260200161034b565b61033f61046c36600461254b565b6109ff565b61035d60115481565b6104266104883660046125ca565b610ac1565b61033f61049b36600461254b565b610b44565b61035d6104ae3660046125f6565b6001600160a01b031660009081526009602052604090205490565b61033f6104d736600461254b565b610bb7565b6104266104ea366004612575565b610c3a565b61035d600d5481565b61042661050636600461261f565b610c46565b610426610519366004612575565b610cca565b61035d69d3c21bcecceda100000081565b61035d61053d366004612575565b610d3e565b61035d6105503660046125f6565b610d49565b610426610d6b565b61035d600c5481565b61042661057436600461254b565b610d7f565b61035d61058736600461263c565b610d94565b61035d61059a3660046125f6565b60126020526000908152604090205481565b61035d600e5481565b61035d7f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b7581565b6007546001600160a01b03165b6040516001600160a01b03909116815260200161034b565b6105e961060f366004612675565b610f78565b61033f61062236600461254b565b610f90565b61033f6106353660046125ca565b61100a565b610373611033565b61035d600b5481565b61035d600081565b61033f61066136600461254b565b611042565b61033f61067436600461254b565b61110a565b61035d60085481565b600f5461033f9060ff1681565b61035d61069d366004612575565b6111db565b61033f6106b036600461258e565b6111f2565b6104266106c3366004612697565b611211565b61035d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6104266106fd3660046125ca565b611493565b61035d61071036600461270a565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b61035d670de0b6b3a764000081565b6104266107583660046125f6565b6114b8565b61042661076b366004612575565b61152e565b60006001600160e01b03198216635a05180f60e01b14806107955750610795826115cc565b92915050565b6060600580546107aa90612734565b80601f01602080910402602001604051908101604052809291908181526020018280546107d690612734565b80156108235780601f106107f857610100808354040283529160200191610823565b820191906000526020600020905b81548152906001019060200180831161080657829003601f168201915b5050505050905090565b336000818152600a602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020612924833981519152906108769086815260200190565b60405180910390a350600192915050565b6000610891611601565b905090565b600061079582611613565b6000826001600160a01b0381166108b757600080fd5b306001600160a01b038216036108cc57600080fd5b6001600160a01b0385166000908152600a602090815260408083203384529091529020546108fa9084611631565b6001600160a01b0386166000908152600a6020908152604080832033845290915281209190915561092a84611613565b6001600160a01b0387166000908152600960205260409020549091506109509082611631565b6001600160a01b03808816600090815260096020526040808220939093559087168152205461097f908261163d565b6001600160a01b038087166000818152600960205260409081902093909355915190881690600080516020612904833981519152906109c19088815260200190565b60405180910390a350600195945050505050565b6000828152602081905260409020600101546109f081611649565b6109fa8383611653565b505050565b6000826001600160a01b038116610a1557600080fd5b306001600160a01b03821603610a2a57600080fd5b33600090815260096020526040902054610a449084611631565b33600090815260096020526040808220929092556001600160a01b03861681522054610a70908461163d565b6001600160a01b03851660008181526009602052604090209190915533600080516020612904833981519152610aa586611675565b6040519081526020015b60405180910390a35060019392505050565b6001600160a01b0381163314610b365760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610b40828261169a565b5050565b336000908152600a602090815260408083206001600160a01b0386168452909152812054610b72908361163d565b336000818152600a602090815260408083206001600160a01b038916808552908352928190208590555193845290926000805160206129248339815191529101610876565b6000610be37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361100a565b610c275760405162461bcd60e51b81526020600482015260156024820152744d7573742068617665206d696e74657220726f6c6560581b6044820152606401610b2d565b610c3183836116bc565b50600192915050565b610c43816117f1565b50565b610c4e6118b0565b600f5460ff1615610cb757600c54610c69906276a700612784565b4211610cb75760405162461bcd60e51b815260206004820152601f60248201527f4d7573742077616974203930206461797320746f2064656163746976617465006044820152606401610b2d565b600f805460ff1916911515919091179055565b610cf47f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b753361100a565b610d395760405162461bcd60e51b81526020600482015260166024820152754d7573742068617665207265626173657220726f6c6560501b6044820152606401610b2d565b600e55565b600061079582611675565b6001600160a01b03811660009081526009602052604081205461079590611675565b610d736118b0565b610d7d600061190a565b565b610d8a82338361195c565b610b4082826119ee565b600f5460009060ff16610ddb5760405162461bcd60e51b815260206004820152600f60248201526e149958985cd948191a5cd8589b1959608a1b6044820152606401610b2d565b610e057f5fde63b561377d1441afa201ff619faac2ff8fed70a7fbdbe7a5cb07768c0b753361100a565b610e4a5760405162461bcd60e51b81526020600482015260166024820152754d7573742068617665207265626173657220726f6c6560501b6044820152606401610b2d565b82600003610e9e57600854604080518681526020810183905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150601454610f71565b60085482610ed657610ece670de0b6b3a7640000610ec8610ebf8288611631565b60085490611b10565b90611b1c565b600855610f1a565b6000610ef1670de0b6b3a7640000610ec8610ebf828961163d565b9050610efb611601565b811015610f0c576008819055610f18565b610f14611601565b6008555b505b610f25600b54611675565b601455600854604080518781526020810184905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150506014545b9392505050565b6000828152600160205260408120610f719083611b28565b6000610fbc7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361100a565b6110005760405162461bcd60e51b81526020600482015260156024820152744d7573742068617665206d696e74657220726f6c6560581b6044820152606401610b2d565b610c318383611b34565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600680546107aa90612734565b336000908152600a602090815260408083206001600160a01b038616845290915281205480831061109657336000908152600a602090815260408083206001600160a01b03881684529091528120556110c5565b6110a08184611631565b336000908152600a602090815260408083206001600160a01b03891684529091529020555b336000818152600a602090815260408083206001600160a01b038916808552908352928190205490519081529192916000805160206129248339815191529101610aaf565b6000826001600160a01b03811661112057600080fd5b306001600160a01b0382160361113557600080fd5b600061114084611613565b3360009081526009602052604090205490915061115d9082611631565b33600090815260096020526040808220929092556001600160a01b03871681522054611189908261163d565b6001600160a01b038616600081815260096020526040908190209290925590513390600080516020612904833981519152906111c89088815260200190565b60405180910390a3506001949350505050565b600081815260016020526040812061079590611c60565b60006111fc6118b0565b611207848484611c6a565b5060019392505050565b834211156112575760405162461bcd60e51b8152602060048201526013602482015272129051114bdc195c9b5a5d0b595e1c1a5c9959606a1b6044820152606401610b2d565b6011546001600160a01b038816600090815260126020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876112aa83612797565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161132392919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090506001600160a01b03881661138c5760405162461bcd60e51b815260206004820152601660248201527504a4144452f696e76616c69642d616464726573732d360541b6044820152606401610b2d565b60408051600081526020810180835283905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156113df573d6000803e3d6000fd5b505050602060405103516001600160a01b0316886001600160a01b03161461143f5760405162461bcd60e51b8152602060048201526013602482015272129051114bda5b9d985b1a590b5c195c9b5a5d606a1b6044820152606401610b2d565b6001600160a01b038881166000818152600a60209081526040808320948c16808452948252918290208a90559051898152600080516020612924833981519152910160405180910390a35050505050505050565b6000828152602081905260409020600101546114ae81611649565b6109fa838361169a565b6114c06118b0565b6001600160a01b0381166115255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b2d565b610c438161190a565b6115366118b0565b600d54156115915760405162461bcd60e51b815260206004820152602260248201527f7374617274426c6f636b2063616e206f6e6c7920626520736574204f4e434521604482015261212160f01b6064820152608401610b2d565b600d8190556040518181527fc9071777b7b8965ca4af12d74bba5af5f2932e988111a30eeca0afd6ff922f279060200160405180910390a150565b60006001600160e01b03198216637965db0b60e01b148061079557506301ffc9a760e01b6001600160e01b0319831614610795565b6000600b5460001961089191906127b0565b60085460009061079590610ec88469d3c21bcecceda1000000611b10565b6000610f7182846127d2565b6000610f718284612784565b610c438133611cbc565b61165d8282611d15565b60008281526001602052604090206109fa9082611d99565b600061079569d3c21bcecceda1000000610ec860085485611b1090919063ffffffff16565b6116a48282611dae565b60008281526001602052604090206109fa9082611e13565b6014546116c9908261163d565b60145560006116d782611613565b600b549091506116e7908261163d565b600b556116f2611601565b60085411156117435760405162461bcd60e51b815260206004820152601a60248201527f6d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b2d565b6001600160a01b038316600090815260096020526040902054611766908261163d565b6001600160a01b0384166000818152600960209081526040918290209390935580519182529181018490527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a16040518281526001600160a01b03841690600090600080516020612904833981519152906020015b60405180910390a3505050565b6014546117fe9082611631565b601455600061180c82611613565b600b5490915061181c9082611631565b600b55336000908152600960205260409020546118399082611631565b336000818152600960209081526040918290209390935580519182529181018490527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5910160405180910390a160405182815260009033906000805160206129048339815191529060200160405180910390a35050565b6007546001600160a01b03163314610d7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b2d565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038381166000908152600a602090815260408083209386168352929052205460001981146119e857818110156119db5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b2d565b6119e88484848403611e28565b50505050565b6001600160a01b038216611a4e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b2d565b6001600160a01b03821660009081526002602052604090205481811015611ac25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b2d565b6001600160a01b0383166000818152600260209081526040808320868603905560048054879003905551858152919291600080516020612904833981519152910160405180910390a3505050565b6000610f7182846127e5565b6000610f7182846127b0565b6000610f718383611f32565b600b54611b41908261163d565b600b556000611b4f82611675565b601454909150611b5f908261163d565b601455611b6a611601565b6008541115611bbb5760405162461bcd60e51b815260206004820152601a60248201527f6d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b2d565b6001600160a01b038316600090815260096020526040902054611bde908361163d565b6001600160a01b0384166000818152600960209081526040918290209390935580519182529181018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a16040518181526001600160a01b03841690600090600080516020612904833981519152906020016117e4565b6000610795825490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109fa908490611f5c565b611cc6828261100a565b610b4057611cd38161202e565b611cde836020612040565b604051602001611cef9291906127fc565b60408051601f198184030181529082905262461bcd60e51b8252610b2d916004016124fc565b611d1f828261100a565b610b40576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d553390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f71836001600160a01b0384166121dc565b611db8828261100a565b15610b40576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f71836001600160a01b03841661222b565b6001600160a01b038316611e8a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b2d565b6001600160a01b038216611eeb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b2d565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020859055905184815260008051602061292483398151915291016117e4565b6000826000018281548110611f4957611f49612871565b9060005260206000200154905092915050565b6000611fb1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661231e9092919063ffffffff16565b8051909150156109fa5780806020019051810190611fcf9190612887565b6109fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b2d565b60606107956001600160a01b03831660145b6060600061204f8360026127e5565b61205a906002612784565b67ffffffffffffffff811115612072576120726128a4565b6040519080825280601f01601f19166020018201604052801561209c576020820181803683370190505b509050600360fc1b816000815181106120b7576120b7612871565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106120e6576120e6612871565b60200101906001600160f81b031916908160001a905350600061210a8460026127e5565b612115906001612784565b90505b600181111561218d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061214957612149612871565b1a60f81b82828151811061215f5761215f612871565b60200101906001600160f81b031916908160001a90535060049490941c93612186816128ba565b9050612118565b508315610f715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b2d565b600081815260018301602052604081205461222357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610795565b506000610795565b6000818152600183016020526040812054801561231457600061224f6001836127d2565b8554909150600090612263906001906127d2565b90508181146122c857600086600001828154811061228357612283612871565b90600052602060002001549050808760000184815481106122a6576122a6612871565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122d9576122d96128d1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610795565b6000915050610795565b606061232d8484600085612335565b949350505050565b6060824710156123965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b2d565b600080866001600160a01b031685876040516123b291906128e7565b60006040518083038185875af1925050503d80600081146123ef576040519150601f19603f3d011682016040523d82523d6000602084013e6123f4565b606091505b509150915061240587838387612410565b979650505050505050565b6060831561247f578251600003612478576001600160a01b0385163b6124785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b2d565b508161232d565b61232d83838151156124945781518083602001fd5b8060405162461bcd60e51b8152600401610b2d91906124fc565b6000602082840312156124c057600080fd5b81356001600160e01b031981168114610f7157600080fd5b60005b838110156124f35781810151838201526020016124db565b50506000910152565b602081526000825180602084015261251b8160408501602087016124d8565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461254657600080fd5b919050565b6000806040838503121561255e57600080fd5b6125678361252f565b946020939093013593505050565b60006020828403121561258757600080fd5b5035919050565b6000806000606084860312156125a357600080fd5b6125ac8461252f565b92506125ba6020850161252f565b9150604084013590509250925092565b600080604083850312156125dd57600080fd5b823591506125ed6020840161252f565b90509250929050565b60006020828403121561260857600080fd5b610f718261252f565b8015158114610c4357600080fd5b60006020828403121561263157600080fd5b8135610f7181612611565b60008060006060848603121561265157600080fd5b8335925060208401359150604084013561266a81612611565b809150509250925092565b6000806040838503121561268857600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156126b257600080fd5b6126bb8861252f565b96506126c96020890161252f565b95506040880135945060608801359350608088013560ff811681146126ed57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561271d57600080fd5b6127268361252f565b91506125ed6020840161252f565b600181811c9082168061274857607f821691505b60208210810361276857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107955761079561276e565b6000600182016127a9576127a961276e565b5060010190565b6000826127cd57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156107955761079561276e565b80820281158282048414176107955761079561276e565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516128348160178501602088016124d8565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128658160288401602088016124d8565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561289957600080fd5b8151610f7181612611565b634e487b7160e01b600052604160045260246000fd5b6000816128c9576128c961276e565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516128f98184602087016124d8565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a164736f6c6343000817000a",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner has allowed to a spender.",
        "params": {
          "owner_": "The address which owns the funds.",
          "spender": "The address which will spend the funds."
        },
        "returns": {
          "_0": "The number of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. This method is included for ERC20 compatibility. increaseAllowance and decreaseAllowance should be used instead. Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance - if they are both greater than zero - if a transfer transaction is mined before the later approve() call is mined.",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "The balance of the specified address."
        }
      },
      "balanceOfUnderlying(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "The underlying balance of the specified address."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner has allowed to a spender.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner has allowed to a spender. This method should be used instead of approve() to avoid the double approval vulnerability described above.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total number of fragments."
        }
      },
      "transfer(address,uint256)": {
        "details": "Transfer tokens to a specified address.",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "_0": "True on success, false otherwise."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another.",
        "params": {
          "from": "The address you want to send tokens from.",
          "to": "The address you want to transfer to.",
          "value": "The amount of tokens to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferUnderlying(address,uint256)": {
        "details": "Transfer underlying balance to a specified address.",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "_0": "True on success, false otherwise."
        }
      }
    },
    "stateVariables": {
      "_notEntered": {
        "details": "Guard variable for re-entrancy checks. Not currently used"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Burn(address,uint256)": {
        "notice": "Tokens burned event"
      },
      "Mint(address,uint256)": {
        "notice": "Tokens minted event"
      },
      "Rebase(uint256,uint256,uint256)": {
        "notice": "Event emitted when tokens are rebased"
      },
      "StartBlockSet(uint256)": {
        "notice": "InitTimestamp set (see rebase())"
      }
    },
    "kind": "user",
    "methods": {
      "BASE()": {
        "notice": "Used for percentage maths"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Currently returns the internal storage amount"
      },
      "burn(uint256)": {
        "notice": "Burns tokens from msg.sender, decreases totalSupply, initSupply, and a users balance."
      },
      "internalDecimals()": {
        "notice": "Internal decimals used to handle scaling factor"
      },
      "jadesScalingFactor()": {
        "notice": "Scaling factor that adjusts everyone's balances"
      },
      "maxScalingFactor()": {
        "notice": "Computes the current max scaling factor"
      },
      "mint(address,uint256)": {
        "notice": "Mints new tokens, increasing totalSupply, initSupply, and a users balance."
      },
      "mintUnderlying(address,uint256)": {
        "notice": "Mints new tokens using underlying amount, increasing totalSupply, initSupply, and a users balance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8961,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8956_storage)"
      },
      {
        "astId": 9267,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7468_storage)"
      },
      {
        "astId": 9960,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9966,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9968,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9970,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 9972,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 9379,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11319,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_notEntered",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 11334,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "jadesScalingFactor",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11338,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_jadeBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11344,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_allowedFragments",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11346,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "initSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11348,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "initTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11350,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "startBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11352,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "lastBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11354,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "rebaseEnabled",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 11357,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "JCBRewardPerBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 11362,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes32"
      },
      {
        "astId": 11366,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "nonces",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11379,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "INIT_SUPPLY",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 11381,
        "contract": "contracts/JadeToken.sol:JadeToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7468_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7468_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8956_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8956_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7468_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7467,
            "contract": "contracts/JadeToken.sol:JadeToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7153_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)8956_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 8953,
            "contract": "contracts/JadeToken.sol:JadeToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8955,
            "contract": "contracts/JadeToken.sol:JadeToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7153_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7148,
            "contract": "contracts/JadeToken.sol:JadeToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7152,
            "contract": "contracts/JadeToken.sol:JadeToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}