{
  "address": "0xD42912755319665397FF090fBB63B1a31aE87Cee",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "MaticWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receptor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "transferPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receptor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "withdrawMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66b4ba1a5e25ba39ed35d297fb9b436797f03dd0d85a9db6d2aca6a420f29bae",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xD42912755319665397FF090fBB63B1a31aE87Cee",
    "transactionIndex": 0,
    "gasUsed": "1244338",
    "logsBloom": "0x
    "blockHash": "0x87582b507bf6ff4a93edd87d69d8eaf27d1236fa231254141e42eb6c2717cbe9",
    "transactionHash": "0x66b4ba1a5e25ba39ed35d297fb9b436797f03dd0d85a9db6d2aca6a420f29bae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18093063,
        "transactionHash": "0x66b4ba1a5e25ba39ed35d297fb9b436797f03dd0d85a9db6d2aca6a420f29bae",
        "address": "0xD42912755319665397FF090fBB63B1a31aE87Cee",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x87582b507bf6ff4a93edd87d69d8eaf27d1236fa231254141e42eb6c2717cbe9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18093063,
        "transactionHash": "0x66b4ba1a5e25ba39ed35d297fb9b436797f03dd0d85a9db6d2aca6a420f29bae",
        "address": "0xD42912755319665397FF090fBB63B1a31aE87Cee",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x87582b507bf6ff4a93edd87d69d8eaf27d1236fa231254141e42eb6c2717cbe9"
      }
    ],
    "blockNumber": 18093063,
    "cumulativeGasUsed": "1244338",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d55d79d14bfe5f0021a09bf5df07e663",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"MaticWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receptor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receptor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"withdrawMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JadeCoreBankroll.sol\":\"JadeCoreBankroll\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/JadeCoreBankroll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Set type with\\r\\n  // bytes32 values.\\r\\n  // The Set implementation uses private functions, and user-facing\\r\\n  // implementations (such as AddressSet) are just wrappers around the\\r\\n  // underlying Set.\\r\\n  // This means that we can only create new EnumerableSets for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct Set {\\r\\n    // Storage of set values\\r\\n    bytes32[] _values;\\r\\n    // Position of the value in the `values` array, plus 1 because index 0\\r\\n    // means a value is not in the set.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n    if (!_contains(set, value)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n    uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n    if (valueIndex != 0) {\\r\\n      // Equivalent to contains(set, value)\\r\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = valueIndex - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      if (lastIndex != toDeleteIndex) {\\r\\n        bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n        // Move the last value to the index where the value to delete is\\r\\n        set._values[toDeleteIndex] = lastValue;\\r\\n        // Update the index for the moved value\\r\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n      }\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[value];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n    return set._indexes[value] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function _length(Set storage set) private view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n    return set._values[index];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n    return set._values;\\r\\n  }\\r\\n\\r\\n  // Bytes32Set\\r\\n\\r\\n  struct Bytes32Set {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _add(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _remove(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n    return _contains(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n    return _at(set._inner, index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    bytes32[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // AddressSet\\r\\n\\r\\n  struct AddressSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(AddressSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n    return address(uint160(uint256(_at(set._inner, index))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    address[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // UintSet\\r\\n\\r\\n  struct UintSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n    return _contains(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(UintSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n    return uint256(_at(set._inner, index));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    uint256[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Context.sol\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    _transferOwnership(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    _checkOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the sender is not the owner.\\r\\n   */\\r\\n  function _checkOwner() internal view virtual {\\r\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Internal function without access restriction.\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n  // word because each write operation emits an extra SLOAD to first read the\\r\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n  // back. This is the compiler's defense against contract upgrades and\\r\\n  // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n  // The values being non-zero value makes deployment a bit more expensive,\\r\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n  // amount. Since refunds are capped to a percentage of the total\\r\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n  // increase the likelihood of the full refund coming into effect.\\r\\n  uint256 private constant _NOT_ENTERED = 1;\\r\\n  uint256 private constant _ENTERED = 2;\\r\\n\\r\\n  uint256 private _status;\\r\\n\\r\\n  constructor() {\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n   * function is not supported. It is possible to prevent this from happening\\r\\n   * by making the `nonReentrant` function external, and making it call a\\r\\n   * `private` function that does the actual work.\\r\\n   */\\r\\n  modifier nonReentrant() {\\r\\n    _nonReentrantBefore();\\r\\n    _;\\r\\n    _nonReentrantAfter();\\r\\n  }\\r\\n\\r\\n  function _nonReentrantBefore() private {\\r\\n    // On the first call to nonReentrant, _notEntered will be true\\r\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n    // Any calls to nonReentrant after this point will fail\\r\\n    _status = _ENTERED;\\r\\n  }\\r\\n\\r\\n  function _nonReentrantAfter() private {\\r\\n    // By storing the original value once again, a refund is triggered (see\\r\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n    _status = _NOT_ENTERED;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Address.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data\\r\\n  ) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n   *\\r\\n   * _Available since v4.8._\\r\\n   */\\r\\n  function verifyCallResultFromTarget(\\r\\n    address target,\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    if (success) {\\r\\n      if (returndata.length == 0) {\\r\\n        // only check isContract if the call was successful and the return data is empty\\r\\n        // otherwise we already know that it was a contract\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n      }\\r\\n      return returndata;\\r\\n    } else {\\r\\n      _revert(returndata, errorMessage);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason or using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      _revert(returndata, errorMessage);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n    // Look for revert reason and bubble it up if present\\r\\n    if (returndata.length > 0) {\\r\\n      // The easiest way to bubble the revert reason is using memory via assembly\\r\\n      /// @solidity memory-safe-assembly\\r\\n      assembly {\\r\\n        let returndata_size := mload(returndata)\\r\\n        revert(add(32, returndata), returndata_size)\\r\\n      }\\r\\n    } else {\\r\\n      revert(errorMessage);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n  /**\\r\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n   * given ``owner``'s signed approval.\\r\\n   *\\r\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n   * ordering also apply here.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `deadline` must be a timestamp in the future.\\r\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n   * over the EIP712-formatted function arguments.\\r\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n   *\\r\\n   * For more information on the signature format, see the\\r\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n   * section].\\r\\n   */\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current nonce for `owner`. This value must be\\r\\n   * included whenever a signature is generated for {permit}.\\r\\n   *\\r\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n   * prevents a signature from being used multiple times.\\r\\n   */\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n   */\\r\\n  // solhint-disable-next-line func-name-mixedcase\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n      uint256 newAllowance = oldAllowance - value;\\r\\n      _callOptionalReturn(\\r\\n        token,\\r\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function safePermit(\\r\\n    IERC20Permit token,\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) internal {\\r\\n    uint256 nonceBefore = token.nonces(owner);\\r\\n    token.permit(owner, spender, value, deadline, v, r, s);\\r\\n    uint256 nonceAfter = token.nonces(owner);\\r\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return interfaceId == type(IERC165).interfaceId;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControl.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n  /**\\r\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n   *\\r\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n   * {RoleAdminChanged} not being emitted signaling this.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  event RoleAdminChanged(\\r\\n    bytes32 indexed role,\\r\\n    bytes32 indexed previousAdminRole,\\r\\n    bytes32 indexed newAdminRole\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is granted `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call, an admin role\\r\\n   * bearer except when using {AccessControl-_setupRole}.\\r\\n   */\\r\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is revoked `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call:\\r\\n   *   - if using `revokeRole`, it is the admin role bearer\\r\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n   */\\r\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n  struct RoleData {\\r\\n    mapping(address => bool) members;\\r\\n    bytes32 adminRole;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n   * with a standardized message including the required role.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   *\\r\\n   * _Available since v4.1._\\r\\n   */\\r\\n  modifier onlyRole(bytes32 role) {\\r\\n    _checkRole(role);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\r\\n    return _roles[role].members[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n   *\\r\\n   * Format of the revert message is described in {_checkRole}.\\r\\n   *\\r\\n   * _Available since v4.6._\\r\\n   */\\r\\n  function _checkRole(bytes32 role) internal view virtual {\\r\\n    _checkRole(role, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `account` is missing `role`.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   */\\r\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      revert(\\r\\n        string(\\r\\n          abi.encodePacked(\\r\\n            \\\"AccessControl: account \\\",\\r\\n            Strings.toHexString(account),\\r\\n            \\\" is missing role \\\",\\r\\n            Strings.toHexString(uint256(role), 32)\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\r\\n    return _roles[role].adminRole;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function grantRole(\\r\\n    bytes32 role,\\r\\n    address account\\r\\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function revokeRole(\\r\\n    bytes32 role,\\r\\n    address account\\r\\n  ) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) public virtual override {\\r\\n    require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n   * checks on the calling account.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   *\\r\\n   * [WARNING]\\r\\n   * ====\\r\\n   * This function should only be called from the constructor when setting\\r\\n   * up the initial roles for the system.\\r\\n   *\\r\\n   * Using this function in any other way is effectively circumventing the admin\\r\\n   * system imposed by {AccessControl}.\\r\\n   * ====\\r\\n   *\\r\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n   */\\r\\n  function _setupRole(bytes32 role, address account) internal virtual {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n   *\\r\\n   * Emits a {RoleAdminChanged} event.\\r\\n   */\\r\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n    _roles[role].adminRole = adminRole;\\r\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      _roles[role].members[account] = true;\\r\\n      emit RoleGranted(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n    if (hasRole(role, account)) {\\r\\n      _roles[role].members[account] = false;\\r\\n      emit RoleRevoked(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/IAccessControlEnumerable.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlEnumerable is IAccessControl {\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControlEnumerable.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\r\\n */\\r\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n    return\\r\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(\\r\\n    bytes32 role,\\r\\n    uint256 index\\r\\n  ) public view virtual override returns (address) {\\r\\n    return _roleMembers[role].at(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\r\\n    return _roleMembers[role].length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_grantRole} to track enumerable memberships\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\r\\n    super._grantRole(role, account);\\r\\n    _roleMembers[role].add(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual override {\\r\\n    super._revokeRole(role, account);\\r\\n    _roleMembers[role].remove(account);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n  enum Rounding {\\r\\n    Down, // Toward negative infinity\\r\\n    Up, // Toward infinity\\r\\n    Zero // Toward zero\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the largest of two numbers.\\r\\n   */\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a > b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the smallest of two numbers.\\r\\n   */\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average of two numbers. The result is rounded towards\\r\\n   * zero.\\r\\n   */\\r\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b) / 2 can overflow.\\r\\n    return (a & b) + (a ^ b) / 2;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ceiling of the division of two numbers.\\r\\n   *\\r\\n   * This differs from standard division with `/` in that it rounds up instead\\r\\n   * of rounding down.\\r\\n   */\\r\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n   * with further edits by Uniswap Labs also under MIT license.\\r\\n   */\\r\\n  function mulDiv(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2^256 + prod0.\\r\\n      uint256 prod0; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(x, y, not(0))\\r\\n        prod0 := mul(x, y)\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division.\\r\\n      if (prod1 == 0) {\\r\\n        return prod0 / denominator;\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n      uint256 remainder;\\r\\n      assembly {\\r\\n        // Compute remainder using mulmod.\\r\\n        remainder := mulmod(x, y, denominator)\\r\\n\\r\\n        // Subtract 256 bit number from 512 bit number.\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n      // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n      uint256 twos = denominator & (~denominator + 1);\\r\\n      assembly {\\r\\n        // Divide denominator by twos.\\r\\n        denominator := div(denominator, twos)\\r\\n\\r\\n        // Divide [prod1 prod0] by twos.\\r\\n        prod0 := div(prod0, twos)\\r\\n\\r\\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n\\r\\n      // Shift in bits from prod1 into prod0.\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n      // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n      uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n      // in modular arithmetic, doubling the correct bits in each step.\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inverse;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n   */\\r\\n  function mulDiv(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator,\\r\\n    Rounding rounding\\r\\n  ) internal pure returns (uint256) {\\r\\n    uint256 result = mulDiv(x, y, denominator);\\r\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n      result += 1;\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n   *\\r\\n   * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n   */\\r\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n    //\\r\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n    //\\r\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n    //\\r\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n    uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n    // into the expected uint128 result.\\r\\n    unchecked {\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      result = (result + a / result) >> 1;\\r\\n      return min(result, a / result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n   */\\r\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = sqrt(a);\\r\\n      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log2(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >> 128 > 0) {\\r\\n        value >>= 128;\\r\\n        result += 128;\\r\\n      }\\r\\n      if (value >> 64 > 0) {\\r\\n        value >>= 64;\\r\\n        result += 64;\\r\\n      }\\r\\n      if (value >> 32 > 0) {\\r\\n        value >>= 32;\\r\\n        result += 32;\\r\\n      }\\r\\n      if (value >> 16 > 0) {\\r\\n        value >>= 16;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >> 8 > 0) {\\r\\n        value >>= 8;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >> 4 > 0) {\\r\\n        value >>= 4;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >> 2 > 0) {\\r\\n        value >>= 2;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >> 1 > 0) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log2(value);\\r\\n      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log10(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >= 10 ** 64) {\\r\\n        value /= 10 ** 64;\\r\\n        result += 64;\\r\\n      }\\r\\n      if (value >= 10 ** 32) {\\r\\n        value /= 10 ** 32;\\r\\n        result += 32;\\r\\n      }\\r\\n      if (value >= 10 ** 16) {\\r\\n        value /= 10 ** 16;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >= 10 ** 8) {\\r\\n        value /= 10 ** 8;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >= 10 ** 4) {\\r\\n        value /= 10 ** 4;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >= 10 ** 2) {\\r\\n        value /= 10 ** 2;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >= 10 ** 1) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log10(value);\\r\\n      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   *\\r\\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n   */\\r\\n  function log256(uint256 value) internal pure returns (uint256) {\\r\\n    uint256 result = 0;\\r\\n    unchecked {\\r\\n      if (value >> 128 > 0) {\\r\\n        value >>= 128;\\r\\n        result += 16;\\r\\n      }\\r\\n      if (value >> 64 > 0) {\\r\\n        value >>= 64;\\r\\n        result += 8;\\r\\n      }\\r\\n      if (value >> 32 > 0) {\\r\\n        value >>= 32;\\r\\n        result += 4;\\r\\n      }\\r\\n      if (value >> 16 > 0) {\\r\\n        value >>= 16;\\r\\n        result += 2;\\r\\n      }\\r\\n      if (value >> 8 > 0) {\\r\\n        result += 1;\\r\\n      }\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n   * Returns 0 if given 0.\\r\\n   */\\r\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      uint256 result = log256(value);\\r\\n      return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n  bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n   */\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n    unchecked {\\r\\n      uint256 length = Math.log10(value) + 1;\\r\\n      string memory buffer = new string(length);\\r\\n      uint256 ptr;\\r\\n      /// @solidity memory-safe-assembly\\r\\n      assembly {\\r\\n        ptr := add(buffer, add(32, length))\\r\\n      }\\r\\n      while (true) {\\r\\n        ptr--;\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n        }\\r\\n        value /= 10;\\r\\n        if (value == 0) break;\\r\\n      }\\r\\n      return buffer;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n    unchecked {\\r\\n      return toHexString(value, Math.log256(value) + 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n   */\\r\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n    bytes memory buffer = new bytes(2 * length + 2);\\r\\n    buffer[0] = \\\"0\\\";\\r\\n    buffer[1] = \\\"x\\\";\\r\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n      buffer[i] = _SYMBOLS[value & 0xf];\\r\\n      value >>= 4;\\r\\n    }\\r\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n    return string(buffer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(address addr) internal pure returns (string memory) {\\r\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      uint256 c = a + b;\\r\\n      if (c < a) return (false, 0);\\r\\n      return (true, c);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b > a) return (false, 0);\\r\\n      return (true, a - b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n      // benefit is lost if 'b' is also tested.\\r\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n      if (a == 0) return (true, 0);\\r\\n      uint256 c = a * b;\\r\\n      if (c / a != b) return (false, 0);\\r\\n      return (true, c);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b == 0) return (false, 0);\\r\\n      return (true, a / b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    unchecked {\\r\\n      if (b == 0) return (false, 0);\\r\\n      return (true, a % b);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a + b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a * b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a % b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b <= a, errorMessage);\\r\\n      return a - b;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b > 0, errorMessage);\\r\\n      return a / b;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting with custom message when dividing by zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      require(b > 0, errorMessage);\\r\\n      return a % b;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface IJadeToken {\\r\\n  function mint(address to, uint256 amount) external;\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function transferUnderlying(address to, uint256 value) external returns (bool);\\r\\n  function fragmentToJade(uint256 value) external view returns (uint256);\\r\\n  function jadeToFragment(uint256 jade) external view returns (uint256);\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n  function balanceOfUnderlying(address who) external view returns (uint256);\\r\\n  function burn(uint256 amount) external;\\r\\n}\\r\\n\\r\\n// interface IFuToken {\\r\\n//     function mint(address to, uint256 amount) external;\\r\\n// }\\r\\n\\r\\ncontract JadeCoreBankroll is Ownable, ReentrancyGuard, AccessControlEnumerable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  bytes32 public constant GAME_ROLE = keccak256(\\\"GAME_ROLE\\\");\\r\\n  //   IJadeToken public jade;\\r\\n  // IFuToken public fu;\\r\\n\\r\\n  event FundsSent(address indexed receptor, uint256 amount);\\r\\n  event MaticWithdrawn(uint256 amount, address indexed receptor, uint256 gas);\\r\\n\\r\\n  constructor() Ownable() ReentrancyGuard() {\\r\\n    // jade = _jade;\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  function transferPayout(address receptor, uint256 _amount, address token) external nonReentrant {\\r\\n    require(hasRole(GAME_ROLE, _msgSender()), \\\"Must have GAME role\\\");\\r\\n    require(_amount > 0, \\\"amount must be greater than 0\\\");\\r\\n\\r\\n    //     if (tokenAddress == address(0)) {\\r\\n    //   if (msg.value < wager) {\\r\\n    //     revert InvalidValue(wager, msg.value);\\r\\n    //   }\\r\\n    //   _refundExcessValue(msg.value - wager);\\r\\n    // } else {\\r\\n    //   IERC20(tokenAddress).safeTransferFrom(msgSender, address(this), wager);\\r\\n    // }\\r\\n\\r\\n    // uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n    IERC20(token).safeTransfer(receptor, _amount);\\r\\n    // if (_amount > balance) {\\r\\n    //   uint256 diffAmount = _amount - balance;\\r\\n    //   //   jade.mint(receptor, diffAmount);\\r\\n    //   // IERC20(address(jade)).safeTransferFrom(address(this), receptor, balance);\\r\\n    //   IERC20(token).safeTransfer(receptor, balance);\\r\\n    // } else {\\r\\n    //   // IERC20(address(jade)).safeTransferFrom(address(this), receptor, _amount);\\r\\n    //   IERC20(token).safeTransfer(receptor, _amount);\\r\\n    // }\\r\\n\\r\\n    emit FundsSent(receptor, _amount);\\r\\n  }\\r\\n\\r\\n  // function getFuTokens(uint256 _amount, address receptor){\\r\\n  //     require(hasR)\\r\\n  // }\\r\\n\\r\\n  function withdrawMatic(uint256 _amount, address receptor, uint256 _gas) external onlyOwner {\\r\\n    (bool sent, ) = receptor.call{ gas: _gas, value: _amount }(\\\"\\\");\\r\\n    require(sent, \\\"Failed to send MATIC\\\");\\r\\n    emit MaticWithdrawn(_amount, receptor, _gas);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x3b88c1ca692af37af36fe0bc48c81a82889402f23d2266713be217e1dc4d60e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000034565b600180556200002e60003362000084565b620001d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000090828262000094565b5050565b620000a08282620000bf565b6000828152600360205260409020620000ba908262000163565b505050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620000905760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200011f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200017a836001600160a01b03841662000183565b90505b92915050565b6000818152600183016020526040812054620001cc575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200017d565b5060006200017d565b6112f080620001e56000396000f3fe6080604052600436106100ec5760003560e01c80638da5cb5b1161008a578063ab40070611610059578063ab40070614610289578063ca15c873146102bd578063d547741f146102dd578063f2fde38b146102fd57600080fd5b80638da5cb5b146102025780639010d07c1461023457806391d1485414610254578063a217fddf1461027457600080fd5b80632f2ff15d116100c65780632f2ff15d1461018d57806336568abe146101ad5780636c025ec2146101cd578063715018a6146101ed57600080fd5b806301ffc9a7146100f8578063192be4d51461012d578063248a9ca31461014f57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004610ff4565b61031d565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014d61014836600461103a565b610348565b005b34801561015b57600080fd5b5061017f61016a36600461106f565b60009081526002602052604090206001015490565b604051908152602001610124565b34801561019957600080fd5b5061014d6101a8366004611088565b61043b565b3480156101b957600080fd5b5061014d6101c8366004611088565b610465565b3480156101d957600080fd5b5061014d6101e83660046110b4565b6104e3565b3480156101f957600080fd5b5061014d610607565b34801561020e57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b34801561024057600080fd5b5061021c61024f3660046110f0565b61061b565b34801561026057600080fd5b5061011861026f366004611088565b61063a565b34801561028057600080fd5b5061017f600081565b34801561029557600080fd5b5061017f7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa8881565b3480156102c957600080fd5b5061017f6102d836600461106f565b610665565b3480156102e957600080fd5b5061014d6102f8366004611088565b61067c565b34801561030957600080fd5b5061014d610318366004611112565b6106a1565b60006001600160e01b03198216635a05180f60e01b148061034257506103428261071a565b92915050565b61035061074f565b6000826001600160a01b03168285604051600060405180830381858888f193505050503d806000811461039f576040519150601f19603f3d011682016040523d82523d6000602084013e6103a4565b606091505b50509050806103f15760405162461bcd60e51b81526020600482015260146024820152734661696c656420746f2073656e64204d4154494360601b60448201526064015b60405180910390fd5b60408051858152602081018490526001600160a01b038516917fe63f8c69f119d38dd299f53067b72122f89c3cac1748da939809c5b50536e489910160405180910390a250505050565b600082815260026020526040902060010154610456816107a9565b61046083836107b3565b505050565b6001600160a01b03811633146104d55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103e8565b6104df82826107d5565b5050565b6104eb6107f7565b6105157f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa883361063a565b6105575760405162461bcd60e51b81526020600482015260136024820152724d75737420686176652047414d4520726f6c6560681b60448201526064016103e8565b600082116105a75760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016103e8565b6105bb6001600160a01b0382168484610850565b826001600160a01b03167f8c8f77105ce8ee99e391fd4da140bc14a988eb4cf878b240bfed9b10ae7c6758836040516105f691815260200190565b60405180910390a261046060018055565b61060f61074f565b61061960006108a2565b565b600082815260036020526040812061063390836108f2565b9392505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600360205260408120610342906108fe565b600082815260026020526040902060010154610697816107a9565b61046083836107d5565b6106a961074f565b6001600160a01b03811661070e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e8565b610717816108a2565b50565b60006001600160e01b03198216637965db0b60e01b148061034257506301ffc9a760e01b6001600160e01b0319831614610342565b6000546001600160a01b031633146106195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e8565b6107178133610908565b6107bd8282610961565b600082815260036020526040902061046090826109e7565b6107df82826109fc565b60008281526003602052604090206104609082610a63565b6002600154036108495760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e8565b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610460908490610a78565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106338383610b4a565b6000610342825490565b610912828261063a565b6104df5761091f81610b74565b61092a836020610b86565b60405160200161093b929190611151565b60408051601f198184030181529082905262461bcd60e51b82526103e8916004016111c6565b61096b828261063a565b6104df5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556109a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610633836001600160a01b038416610d22565b610a06828261063a565b156104df5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610633836001600160a01b038416610d71565b6000610acd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e649092919063ffffffff16565b8051909150156104605780806020019051810190610aeb91906111f9565b6104605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e8565b6000826000018281548110610b6157610b6161121b565b9060005260206000200154905092915050565b60606103426001600160a01b03831660145b60606000610b95836002611247565b610ba090600261125e565b67ffffffffffffffff811115610bb857610bb8611271565b6040519080825280601f01601f191660200182016040528015610be2576020820181803683370190505b509050600360fc1b81600081518110610bfd57610bfd61121b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610c2c57610c2c61121b565b60200101906001600160f81b031916908160001a9053506000610c50846002611247565b610c5b90600161125e565b90505b6001811115610cd3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610c8f57610c8f61121b565b1a60f81b828281518110610ca557610ca561121b565b60200101906001600160f81b031916908160001a90535060049490941c93610ccc81611287565b9050610c5e565b5083156106335760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e8565b6000818152600183016020526040812054610d6957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610342565b506000610342565b60008181526001830160205260408120548015610e5a576000610d9560018361129e565b8554909150600090610da99060019061129e565b9050818114610e0e576000866000018281548110610dc957610dc961121b565b9060005260206000200154905080876000018481548110610dec57610dec61121b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610e1f57610e1f6112b1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610342565b6000915050610342565b6060610e738484600085610e7b565b949350505050565b606082471015610edc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e8565b600080866001600160a01b03168587604051610ef891906112c7565b60006040518083038185875af1925050503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b606091505b5091509150610f4b87838387610f56565b979650505050505050565b60608315610fc5578251600003610fbe576001600160a01b0385163b610fbe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e8565b5081610e73565b610e738383815115610fda5781518083602001fd5b8060405162461bcd60e51b81526004016103e891906111c6565b60006020828403121561100657600080fd5b81356001600160e01b03198116811461063357600080fd5b80356001600160a01b038116811461103557600080fd5b919050565b60008060006060848603121561104f57600080fd5b8335925061105f6020850161101e565b9150604084013590509250925092565b60006020828403121561108157600080fd5b5035919050565b6000806040838503121561109b57600080fd5b823591506110ab6020840161101e565b90509250929050565b6000806000606084860312156110c957600080fd5b6110d28461101e565b9250602084013591506110e76040850161101e565b90509250925092565b6000806040838503121561110357600080fd5b50508035926020909101359150565b60006020828403121561112457600080fd5b6106338261101e565b60005b83811015611148578181015183820152602001611130565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161118981601785016020880161112d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516111ba81602884016020880161112d565b01602801949350505050565b60208152600082518060208401526111e581604085016020870161112d565b601f01601f19169190910160400192915050565b60006020828403121561120b57600080fd5b8151801515811461063357600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761034257610342611231565b8082018082111561034257610342611231565b634e487b7160e01b600052604160045260246000fd5b60008161129657611296611231565b506000190190565b8181038181111561034257610342611231565b634e487b7160e01b600052603160045260246000fd5b600082516112d981846020870161112d565b919091019291505056fea164736f6c6343000817000a",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80638da5cb5b1161008a578063ab40070611610059578063ab40070614610289578063ca15c873146102bd578063d547741f146102dd578063f2fde38b146102fd57600080fd5b80638da5cb5b146102025780639010d07c1461023457806391d1485414610254578063a217fddf1461027457600080fd5b80632f2ff15d116100c65780632f2ff15d1461018d57806336568abe146101ad5780636c025ec2146101cd578063715018a6146101ed57600080fd5b806301ffc9a7146100f8578063192be4d51461012d578063248a9ca31461014f57600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004610ff4565b61031d565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b5061014d61014836600461103a565b610348565b005b34801561015b57600080fd5b5061017f61016a36600461106f565b60009081526002602052604090206001015490565b604051908152602001610124565b34801561019957600080fd5b5061014d6101a8366004611088565b61043b565b3480156101b957600080fd5b5061014d6101c8366004611088565b610465565b3480156101d957600080fd5b5061014d6101e83660046110b4565b6104e3565b3480156101f957600080fd5b5061014d610607565b34801561020e57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b34801561024057600080fd5b5061021c61024f3660046110f0565b61061b565b34801561026057600080fd5b5061011861026f366004611088565b61063a565b34801561028057600080fd5b5061017f600081565b34801561029557600080fd5b5061017f7f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa8881565b3480156102c957600080fd5b5061017f6102d836600461106f565b610665565b3480156102e957600080fd5b5061014d6102f8366004611088565b61067c565b34801561030957600080fd5b5061014d610318366004611112565b6106a1565b60006001600160e01b03198216635a05180f60e01b148061034257506103428261071a565b92915050565b61035061074f565b6000826001600160a01b03168285604051600060405180830381858888f193505050503d806000811461039f576040519150601f19603f3d011682016040523d82523d6000602084013e6103a4565b606091505b50509050806103f15760405162461bcd60e51b81526020600482015260146024820152734661696c656420746f2073656e64204d4154494360601b60448201526064015b60405180910390fd5b60408051858152602081018490526001600160a01b038516917fe63f8c69f119d38dd299f53067b72122f89c3cac1748da939809c5b50536e489910160405180910390a250505050565b600082815260026020526040902060010154610456816107a9565b61046083836107b3565b505050565b6001600160a01b03811633146104d55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103e8565b6104df82826107d5565b5050565b6104eb6107f7565b6105157f6a64baf327d646d1bca72653e2a075d15fd6ac6d8cbd7f6ee03fc55875e0fa883361063a565b6105575760405162461bcd60e51b81526020600482015260136024820152724d75737420686176652047414d4520726f6c6560681b60448201526064016103e8565b600082116105a75760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016103e8565b6105bb6001600160a01b0382168484610850565b826001600160a01b03167f8c8f77105ce8ee99e391fd4da140bc14a988eb4cf878b240bfed9b10ae7c6758836040516105f691815260200190565b60405180910390a261046060018055565b61060f61074f565b61061960006108a2565b565b600082815260036020526040812061063390836108f2565b9392505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600360205260408120610342906108fe565b600082815260026020526040902060010154610697816107a9565b61046083836107d5565b6106a961074f565b6001600160a01b03811661070e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e8565b610717816108a2565b50565b60006001600160e01b03198216637965db0b60e01b148061034257506301ffc9a760e01b6001600160e01b0319831614610342565b6000546001600160a01b031633146106195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e8565b6107178133610908565b6107bd8282610961565b600082815260036020526040902061046090826109e7565b6107df82826109fc565b60008281526003602052604090206104609082610a63565b6002600154036108495760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e8565b6002600155565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610460908490610a78565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106338383610b4a565b6000610342825490565b610912828261063a565b6104df5761091f81610b74565b61092a836020610b86565b60405160200161093b929190611151565b60408051601f198184030181529082905262461bcd60e51b82526103e8916004016111c6565b61096b828261063a565b6104df5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556109a33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610633836001600160a01b038416610d22565b610a06828261063a565b156104df5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610633836001600160a01b038416610d71565b6000610acd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e649092919063ffffffff16565b8051909150156104605780806020019051810190610aeb91906111f9565b6104605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e8565b6000826000018281548110610b6157610b6161121b565b9060005260206000200154905092915050565b60606103426001600160a01b03831660145b60606000610b95836002611247565b610ba090600261125e565b67ffffffffffffffff811115610bb857610bb8611271565b6040519080825280601f01601f191660200182016040528015610be2576020820181803683370190505b509050600360fc1b81600081518110610bfd57610bfd61121b565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610c2c57610c2c61121b565b60200101906001600160f81b031916908160001a9053506000610c50846002611247565b610c5b90600161125e565b90505b6001811115610cd3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610c8f57610c8f61121b565b1a60f81b828281518110610ca557610ca561121b565b60200101906001600160f81b031916908160001a90535060049490941c93610ccc81611287565b9050610c5e565b5083156106335760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e8565b6000818152600183016020526040812054610d6957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610342565b506000610342565b60008181526001830160205260408120548015610e5a576000610d9560018361129e565b8554909150600090610da99060019061129e565b9050818114610e0e576000866000018281548110610dc957610dc961121b565b9060005260206000200154905080876000018481548110610dec57610dec61121b565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610e1f57610e1f6112b1565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610342565b6000915050610342565b6060610e738484600085610e7b565b949350505050565b606082471015610edc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e8565b600080866001600160a01b03168587604051610ef891906112c7565b60006040518083038185875af1925050503d8060008114610f35576040519150601f19603f3d011682016040523d82523d6000602084013e610f3a565b606091505b5091509150610f4b87838387610f56565b979650505050505050565b60608315610fc5578251600003610fbe576001600160a01b0385163b610fbe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e8565b5081610e73565b610e738383815115610fda5781518083602001fd5b8060405162461bcd60e51b81526004016103e891906111c6565b60006020828403121561100657600080fd5b81356001600160e01b03198116811461063357600080fd5b80356001600160a01b038116811461103557600080fd5b919050565b60008060006060848603121561104f57600080fd5b8335925061105f6020850161101e565b9150604084013590509250925092565b60006020828403121561108157600080fd5b5035919050565b6000806040838503121561109b57600080fd5b823591506110ab6020840161101e565b90509250929050565b6000806000606084860312156110c957600080fd5b6110d28461101e565b9250602084013591506110e76040850161101e565b90509250925092565b6000806040838503121561110357600080fd5b50508035926020909101359150565b60006020828403121561112457600080fd5b6106338261101e565b60005b83811015611148578181015183820152602001611130565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161118981601785016020880161112d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516111ba81602884016020880161112d565b01602801949350505050565b60208152600082518060208401526111e581604085016020870161112d565b601f01601f19169190910160400192915050565b60006020828403121561120b57600080fd5b8151801515811461063357600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761034257610342611231565b8082018082111561034257610342611231565b634e487b7160e01b600052604160045260246000fd5b60008161129657611296611231565b506000190190565b8181038181111561034257610342611231565b634e487b7160e01b600052603160045260246000fd5b600082516112d981846020870161112d565b919091019291505056fea164736f6c6343000817000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4181,
        "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4296,
        "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5182,
        "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)5177_storage)"
      },
      {
        "astId": 5511,
        "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3867_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3867_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3867_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5177_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5177_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3867_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3866,
            "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3552_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)5177_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 5174,
            "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5176,
            "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3552_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3547,
            "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3551,
            "contract": "contracts/JadeCoreBankroll.sol:JadeCoreBankroll",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}